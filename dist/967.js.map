{"version":3,"file":"967.js?ver=e312d7c6a9b65b43b49a","mappings":"+KAOA,MAWA,EAXqBA,IAAsC,IAArC,aAACC,GAA+BD,EAClD,OACIE,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,SAAS,QAAOC,SAAA,EACnBC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAF,SAAC,WACZC,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,QAAOJ,SACtBJ,O,yDCRjB,MASA,EATiCS,KAC9B,MAAM,KAAEC,IAASC,EAAAA,EAAAA,GAAS,CACrBC,SAAU,CAAC,2BACXC,QAASC,EAAAA,IAEPC,EAAyBL,GAAMM,aACrC,OAAOD,E,iFCLX,MAwBA,EAxBiCE,IAC7B,MAAMF,GAAwBN,EAAAA,EAAAA,KAE9B,OAAOS,EAAAA,EAAAA,GAAiB,CACpBN,SAAS,CAAC,SAAUK,GACpBJ,QAASd,IAAiB,IAAhB,UAACoB,EAAU,GAAEpB,EACnB,IAAIgB,EAAuB,MAAM,IAAIK,MAAM,sBAC3C,MCRiBC,OAAMC,EAAcL,KAC7C,IACI,MAAMM,EAAe,IAAIC,gBAgBzB,OAdAD,EAAaE,OAAO,IAAKR,EAAOS,GAChCH,EAAaE,OAAO,OAAQR,EAAOU,KAAKC,KAAK,MAE1CX,EAAOY,QAAQN,EAAaE,OAAO,SAAUR,EAAOY,QACpDZ,EAAOa,OAAOP,EAAaE,OAAO,QAASR,EAAOa,MAAMC,YACxDd,EAAOe,QAAQT,EAAaE,OAAO,SAAUR,EAAOe,OAAOD,YAC3Dd,EAAOgB,kBAAkBV,EAAaE,OAAO,mBAAoBR,EAAOgB,yBAEpDC,EAAAA,EAAMC,IAAI,GAAGC,EAAAA,aAA0Bb,EAAaQ,aAAc,CACrFM,QAAQ,CACJC,cAAc,UAAUhB,IACxB,eAAe,uBAGPZ,IACpB,CAAE,MAAO6B,GACL,MAAM,IAAInB,MAAM,4BACpB,GDbeoB,CAAqBzB,EAAuB,IAAIE,EAAQe,OAAOb,KAE1EsB,iBAAiB,EACjBC,iBAAkBC,IACd,MAAMC,EAAcD,EAASE,QAAQC,MAAQH,EAASI,SAASD,MAAQH,EAASK,QAAQF,MAAQH,EAASM,YAAYH,MAAQH,EAASO,OAAOJ,MAAQH,EAASQ,WAAWL,MAAQH,EAASS,UAAUN,KAEpM,GAAGF,EAAY,CACX,MAAMS,EAAa,IAAIC,IAAIV,GAAarB,aAAaY,IAAI,UAEzD,OAAOkB,EAAWE,SAASF,QAAYG,CAC3C,K,kCEfL,IAAWC,EAAW,SAAXA,GAAW,OAAXA,EAAW,cAAXA,EAAW,cAAXA,EAAW,oBAAXA,EAAW,YAAXA,EAAW,kBAAXA,EAAW,sBAAXA,EAAW,gBAAXA,CAAW,K,iWCuB7B,MA+HA,EA/HyB1D,IAKI,IALH,KACxB2D,EAAI,cACJC,EAAa,YACbC,EAAW,mBACXC,GACsB9D,EACtB,MAAM,IAAE+D,EAAG,OAAEC,IAAWC,EAAAA,EAAAA,OAChBC,OAAQC,ICzBPC,EAAAA,EAAAA,GAAgE,CACnEC,WAAYrE,IAAA,IAAC,WAAEsE,EAAU,OAAEpD,GAAQlB,EAAA,OACnCuE,EAAAA,EAAAA,IAAiBD,EAAYpD,IAE7BsD,UAAWA,CAAC7D,EAAM8D,KACdC,QAAQC,IAAI,YAAahE,EAAKiE,cAElCC,QAAUrC,IACVkC,QAAQlC,MAAM,YAAaA,EAAMsC,aDkB/BC,GAAIT,IAAeU,EAAAA,EAAAA,MACpBC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,GAC3CC,GAAcC,EAAAA,EAAAA,OACbC,EAAmBC,IAAwBJ,EAAAA,EAAAA,UAChD,MA4CF,OAPAK,EAAAA,EAAAA,YAAU,KACJxB,GAAUH,IAAgBC,GAC5BF,QAED,CAACI,EAAQH,EAAaC,EAAoBF,IAE7Cc,QAAQC,IAAI,aAAchB,GACN,IAAhBA,EAAK8B,OAAqB,MAG5BvF,EAAAA,EAAAA,MAACwF,EAAAA,EAAG,CAAArF,SAAA,EACFH,EAAAA,EAAAA,MAACyF,EAAAA,EAAK,CAACC,cAAY,EAAAvF,SAAA,EACjBC,EAAAA,EAAAA,KAACuF,EAAAA,EAAS,CAAAxF,UACRH,EAAAA,EAAAA,MAAC4F,EAAAA,EAAQ,CAAAzF,SAAA,EACPC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAC,QACXC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAC,QACXC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAC,UACXC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAACC,MAAM,SAAQ3F,SAAC,iBAG9BH,EAAAA,EAAAA,MAAC+F,EAAAA,EAAS,CAAA5F,SAAA,CACPsD,EAAKuC,KAAKC,IACTjG,EAAAA,EAAAA,MAAC4F,EAAAA,EAAQ,CAAgBM,OAAK,EAAA/F,SAAA,EAC5BC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAACM,GAAI,CAAEC,aAAc,QAASjG,UACtCC,EAAAA,EAAAA,KAACiG,EAAAA,EAAM,CACLC,IAAKL,EAAMM,OAAOC,SAAS,IAAIC,IAC/BC,IAAKT,EAAMU,KACXpG,QAAQ,SACR4F,GAAI,CAAES,MAAO,GAAIC,OAAQ,GAAIC,aAAc,QAG/C1G,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAACM,GAAI,CAAEC,aAAc,QAASjG,UACtCC,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACyG,WAAY,IAAI5G,SAAE8F,EAAMU,UAEtCvG,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAACM,GAAI,CAAEC,aAAc,QAASjG,SACrC8F,EAAMnD,SAASkD,KAAKgB,GAAWA,EAAOL,OAAMhF,KAAK,SAGpDvB,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAACC,MAAM,SAASK,GAAI,CAAEC,aAAc,QAASjG,UACrDC,EAAAA,EAAAA,KAAC6G,EAAAA,EAAM,CACLC,KAAK,QACLC,MAAM,YACNC,QAASA,KAAMnB,SAAMoB,MA3ELC,EA2EmCrB,EAAMoB,SA1ElEjD,GAELH,EACE,CACEG,aACApD,OAAQ,CACNuG,KAAM,CAACD,GACPE,SAAU,IAGd,CACElD,UAAWA,KACTU,GAAgB,GAChBK,EAAqBjB,QAdGkD,OA2E8CnH,UAE9DC,EAAAA,EAAAA,KAACqH,EAAAA,EAAe,UAtBPxB,EAAMpB,OA6BvBzE,EAAAA,EAAAA,KAACwF,EAAAA,EAAQ,CAAAzF,UACPC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAC6B,QAAS,EAAGvB,GAAI,CAAEC,aAAc,QAASjG,UAClDC,EAAAA,EAAAA,KAAA,OAAKyD,IAAKA,EAAK8D,MAAO,CAAEd,OAAQ,aAInCjD,IACCxD,EAAAA,EAAAA,KAACwF,EAAAA,EAAQ,CAAAzF,UACPC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAC6B,QAAS,EAAGvB,GAAI,CAAEC,aAAc,QAASjG,UAClDC,EAAAA,EAAAA,KAACwH,EAAAA,EAAc,eAOzBxH,EAAAA,EAAAA,KAACyH,EAAAA,EAAQ,CACPC,KAAM/C,EACNgD,iBAAkB,IAClBC,QApFsBC,KAC1BjD,GAAgB,GAEZI,IACFF,EAAYgD,eAAe,CACzBvH,SAAU,CAAC,kBAAmByE,KAEhCF,EAAYgD,eAAe,CACzBvH,SAAU,CAAC,iBAAkByE,KAE/BC,EAAqB,QA2EnBT,QAAQ,oBACRuD,aAAc,CAAEC,SAAU,SAAUC,WAAY,gB,cE9IxD,MAiEA,EAjEgCC,KAC5B,MAGQC,EAASC,IAAcvD,EAAAA,EAAAA,UAAiB,KAE1C,KAACxE,EAAI,cAAEiD,EAAa,YAAEC,EAAW,mBAAEC,EAAkB,UAAE6E,IAAaC,EAAAA,EAAAA,GAAwB,CAC9FjH,EAAE8G,EACF7G,KAAK,CAAC8B,EAAAA,EAAYmF,SAIhBC,EAAgBnI,GAAMoI,MAAMC,SAAQC,GAAQA,EAAKnG,QAAQoG,OAAS,MAAO,GAEzEC,EAAcR,GAAa7E,EAC3BsF,EAA8B,KAAnBX,EAAQY,OAGzB,OACInJ,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACIC,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAK6I,GAAG,OAAMjJ,SAAC,2CAGnCC,EAAAA,EAAAA,KAACiJ,EAAAA,EAAS,CAAEC,MAAOf,EAASgB,SAtBPC,IACzBhB,EAAWgB,EAAMC,OAAOH,QAqBuCI,YAAY,uBAAwBC,WAAY,CAC3GC,gBACAxJ,EAAAA,EAAAA,KAACyJ,EAAAA,EAAc,CAACrC,SAAS,QAAOrH,UAC5BC,EAAAA,EAAAA,KAAC0J,EAAAA,EAAU,OAInB3D,GAAI,CACAS,MAAO,CACHmD,GAAI,OACJC,GAAI,QACJC,GAAI,aAMNf,IAAY9I,EAAAA,EAAAA,KAAA8J,EAAAA,SAAA,IAGbhB,GAAYD,IAAe7I,EAAAA,EAAAA,KAACwH,EAAAA,EAAc,IAG1CsB,IAAaD,GAAwC,IAAzBL,EAAcrD,SAC3CvF,EAAAA,EAAAA,MAACM,EAAAA,EAAU,CAACC,QAAQ,KAAK6I,GAAG,OAAMjJ,SAAA,CAAC,oBACfC,EAAAA,EAAAA,KAAA,UAAAD,SAASoI,OAK5BK,EAAcrD,OAAS,IACxBnF,EAAAA,EAAAA,KAAC+J,EAAgB,CACb1G,KAAMmF,EACNlF,cAAeA,EACfC,YAAaA,EACbC,mBAAoBA,QCzD9BwG,GAAeC,EAAAA,EAAAA,IAAOzE,EAAAA,EAAPyE,EAAiBvK,IAAA,IAAC,MAAEwK,GAAOxK,EAAA,MAAM,CAClDyK,OAAQ,UACR,UAAW,CACTC,gBAAiB,0BAEnB,OAAQ,CACNpE,aAAc,YAiCpB,EA5B4BqE,IAA0C,IAAzC,KAACC,EAAI,MAAEC,GAA+BF,EAE/D,MAKMG,EAAgBF,EAAKG,SACzB,IAAIC,KAAKJ,EAAKG,UAAUE,cAAcC,MAAM,KAAK,GACjD,UAUF,OAAOhL,EAAAA,EAAAA,MAACoK,EAAY,CAAAjK,SAAA,EAChBC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAEwK,KACZvK,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAEuK,EAAKzE,MAAMU,MAAQ,aAC/BvG,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,UApBK8F,EAoBOyE,EAAKzE,MAnBpB,gBAAiBA,EAmBU,MAAMyE,EAAKzE,MAAMM,OAAOI,SAC1DvG,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAEyK,GAAiB,aAC7BxK,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAbU8K,KACpB,QAAW1H,IAAP0H,EAAkB,MAAO,UAC7B,MAAMC,EAAeC,KAAKC,MAAMH,EAAK,KAGrC,MAAO,GAFSE,KAAKC,MAAMF,EAAe,QAC1BA,EAAe,IACFpJ,WAAWuJ,SAAS,EAAG,QAQxCC,CAAeZ,EAAKzE,MAAMsF,cAAgB,eAtBvCtF,OCKjBuF,GAAuBnB,EAAAA,EAAAA,IAAOhE,EAAAA,EAAPgE,EAAevK,IAAA,IAAC,MAAEwK,GAAOxK,EAAA,MAAM,CAC1DgH,aACsC,iBAA7BwD,EAAMmB,MAAM3E,aACY,EAA3BwD,EAAMmB,MAAM3E,aAC6B,EAAzCxD,SAASgH,EAAMmB,MAAM3E,aAAc,IACzCF,MAAO,IACPC,OAAQ,IACR6E,WAAY,OACZ,CAACpB,EAAMqB,YAAYC,KAAK,OAAQ,CAAEhF,MAAO,IAAKC,OAAQ,KACtD,CAACyD,EAAMqB,YAAYC,KAAK,OAAQ,CAAEhF,MAAO,IAAKC,OAAQ,SAGlDgF,EAAiBvJ,IACrBwJ,EAAAA,EAAAA,IAAaxJ,IAAUA,EAAMyJ,UAAUC,OAAS1J,EAAMyJ,SAASC,OAAS,KA8I1E,EA5I2BC,KACzB,MAAM,GAAEpH,IAAOC,EAAAA,EAAAA,KACTV,EAAaS,GAAM,GACnBqH,ECzCeC,MACrB,MAAOH,EAAQI,IAAanH,EAAAA,EAAAA,UAAqB,MAC3CoH,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAgBC,EAAAA,EAAAA,SAAO,GAyB7B,OAvBApH,EAAAA,EAAAA,YAAU,KACMqH,aAAaC,QAAQ,iBAEpBH,EAAcI,UAC3BJ,EAAcI,SAAU,EAGxBF,aAAaG,WAAW,gBAGxBC,MAAM,+BAGNV,EAAS,IAAK,CAAEW,SAAS,IAGzBZ,EAAU,gBAGVa,OAAOC,QAAQC,aAAa,CAAC,EAAGC,SAASC,MAAO,QAEjD,CAAChB,EAAUE,IAEPP,GDYYG,IACb,IAAEtI,EAAG,OAAEC,IAAWC,EAAAA,EAAAA,OAItBtD,KAAM6M,EAAQ,UACd7E,EACAnG,MAAOiL,IEjDavM,EFkDH,CAAEwM,YAAapJ,IEjD3B1D,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,kBAAmBK,EAAOwM,aACrC5M,QAASA,KACA6M,EAAAA,EAAAA,IAAYzM,GAErB0M,UAAW1M,EAAOwM,gBF+ClB/M,KAAMkN,EACNrL,MAAOsL,EAAkB,YACzBjK,EAAW,mBACXC,EAAkB,cAClBF,GGzDyB1C,KACpBC,EAAAA,EAAAA,GAAiB,CACtBN,SAAU,CAAC,iBAAkBK,EAAOwM,aACpC5M,QAASd,IAAA,IAAC,UAAEoB,EAAY,GAAGpB,EAAA,OACzB+N,EAAAA,EAAAA,IAAiB,CACfL,YAAaxM,EAAOwM,YACpBzL,OAAQb,EACRW,MAAOiM,EAAAA,MAEXtL,iBAAkB,EAClBC,iBAAmBsL,IACjB,GAAIA,EAASlL,KAAM,CACjB,MACMO,EADM,IAAIC,IAAI0K,EAASlL,MACNvB,aAAaY,IAAI,UACxC,OAAOkB,EAAaE,SAASF,QAAcG,CAC7C,KH2CAyK,CAAoB,CAAER,YAAapJ,IAGjC6J,EACHV,GAAkD,MAAjC1B,EAAc0B,IAC/BK,GAA4D,MAAtC/B,EAAc+B,GE/DjB5M,MFyEtB,IAPAsE,EAAAA,EAAAA,YAAU,KACJxB,GAAUH,IAAgBC,GAC5BF,MAED,CAACI,EAAQH,EAAaC,EAAoBF,IAG1B,aAAfwI,GAA4C,iBAAfA,EAA+B,OAAO,KAEvE,GAAIzD,EAAW,OAAOrI,EAAAA,EAAAA,KAACwH,EAAAA,EAAc,IACrC,GAAIqG,EACF,OACE7N,EAAAA,EAAAA,KAAC8N,EAAAA,EAAY,CAACnO,aAAa,2BAE/B,IAAKuN,GAAU3G,KACb,OAAOvG,EAAAA,EAAAA,KAAC8N,EAAAA,EAAY,CAACnO,aAAa,mBAEpC,MAAMoO,EAAWb,EAAS9G,SAAS,IAAIC,KA7DnB,oBA+DpB,OACEzG,EAAAA,EAAAA,MAAA,OAAAG,SAAA,EACEC,EAAAA,EAAAA,KAACoF,EAAAA,EAAG,CAAC4I,IAAK,EAAEjO,UACVH,EAAAA,EAAAA,MAACwF,EAAAA,EAAG,CACF6I,QAAQ,OACRC,WAAY,CAAEvE,GAAI,aAAcC,GAAI,UACpCuE,cAAe,CAAExE,GAAI,SAAUC,GAAI,OACnCoE,IAAK,EACLjI,GAAI,CAAEqI,GAAI,KAAMrO,SAAA,EAEhBC,EAAAA,EAAAA,KAACoL,EAAoB,CACnBjL,QAAQ,SACRoH,MAAO,CAAE+D,WAAY,OAAQ5E,aAAc,OAC3CR,IAAK6H,EACLzH,IAAK4G,EAAS3G,QAEhB3G,EAAAA,EAAAA,MAACwF,EAAAA,EAAG,CACFW,GAAI,CACFsI,GAAI,CAAE1E,GAAI,EAAGC,GAAI,GACjB0E,UAAW,OACX9H,MAAO,QACPzG,SAAA,EAEFC,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACC,QAAQ,KAAKoO,SAAU,GAAI5H,WAAY,IAAI5G,SACpDmN,EAAS3G,QAEZ3G,EAAAA,EAAAA,MAACM,EAAAA,EAAU,CAACC,QAAQ,YAAY4G,MAAM,iBAAiBsH,GAAI,EAAEtO,SAAA,CAAC,MACxDmN,EAASsB,MAAMC,gBAEpBvB,EAASwB,cACR1O,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACmO,GAAI,EAAGlO,QAAQ,QAAQ4G,MAAM,eAAchH,SACpDmN,EAASwB,eAGd9O,EAAAA,EAAAA,MAACM,EAAAA,EAAU,CAACmO,GAAI,EAAGlO,QAAQ,QAAQ4G,MAAM,iBAAgBhH,SAAA,CAAC,QAClDmN,EAAS1K,QAAQmM,OAAS,cAMxC3O,EAAAA,EAAAA,KAACoF,EAAAA,EAAG,CACFW,GAAI,CACF6I,UAAW,QACXC,UAAW,SACX,sBAAuB,CAAEZ,QAAS,QAClCa,eAAgB,OAChBC,gBAAiB,QACjBhP,SAE2B,IAA5BmN,GAAU1K,QAAQmM,OACjB3O,EAAAA,EAAAA,KAACkI,EAAuB,KAExBtI,EAAAA,EAAAA,MAACyF,EAAAA,EAAK,CAACC,cAAY,EAACS,GAAI,CAAEqE,gBAAiB,oBAAqBrK,SAAA,EAC9DC,EAAAA,EAAAA,KAACuF,EAAAA,EAAS,CAAAxF,UACRH,EAAAA,EAAAA,MAAC4F,EAAAA,EAAQ,CAAAzF,SAAA,EACPC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAC,OACXC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAC,WACXC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAC,WACXC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAC,gBACXC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAA1F,SAAC,mBAGfH,EAAAA,EAAAA,MAAC+F,EAAAA,EAAS,CAAA5F,SAAA,CACPwN,GAAe9E,MAAMC,SAAQ,CAACC,EAAMqG,IACnCrG,EAAKC,MAAMhD,KAAI,CAAC0E,EAAM2E,KACpBjP,EAAAA,EAAAA,KAACkP,EAAmB,CAElB5E,KAAMA,EACNC,MAAOyE,EAAYtB,EAAAA,GAAauB,EAAY,GAFvC3E,EAAKzE,MAAMpB,GAAK,IAAMwK,QAMjCjP,EAAAA,EAAAA,KAACwF,EAAAA,EAAQ,CAAAzF,UACPC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAC6B,QAAS,EAAGvB,GAAI,CAAEC,aAAc,QAASjG,UAClDC,EAAAA,EAAAA,KAAA,OAAKyD,IAAKA,EAAK8D,MAAO,CAAEd,OAAQ,aAInCjD,IACCxD,EAAAA,EAAAA,KAACwF,EAAAA,EAAQ,CAAAzF,UACPC,EAAAA,EAAAA,KAACyF,EAAAA,EAAS,CAAC6B,QAAS,EAAGvB,GAAI,CAAEC,aAAc,QAASjG,UAClDC,EAAAA,EAAAA,KAACwH,EAAAA,EAAc,mB,+FI7J5B,MAAM2H,EAAyBnO,UAGwC,IAHjC,MAC3CS,EAAK,OACLE,GAC8BjC,EAC9B,IAIE,aAHuB0P,EAAAA,EAAItN,IAAI,gBAAiB,CAC9ClB,OAAQ,CAAEa,QAAOE,aAEHtB,IAClB,CAAE,MAAO6B,GACP,MAAM,IAAInB,MAAM,sCAClB,GAGWsM,EAAcrM,UAGzB,IAIE,aAHuBoO,EAAAA,EAAItN,IAAI,cAAclB,EAAOwM,cAAe,CACjExM,YAEcP,IAClB,CAAE,MAAO6B,GACP,MAAM,IAAInB,MAAM,gCAClB,GAGW0M,EAAmBzM,UAG9B,MAAMC,QAAcR,EAAAA,EAAAA,MAEd,YAAE2M,KAAgBiC,GAAgBzO,EAExC,IAOE,aANuBwO,EAAAA,EAAItN,IAAI,aAAalB,EAAOwM,qBAAsB,CACvExM,OAAQyO,EACRrN,QAAS,CACPC,cAAe,UAAUhB,EAAMN,mBAGnBN,IAClB,CAAE,MAAO6B,GAEP,MADAkC,QAAQlC,MAAM,8BAA+BA,GACvC,IAAInB,MAAM,+BAClB,GAGWuO,EAAiBtO,MAC5BuO,EACA3O,KAEA,IACE,MAAM,KAAE2F,EAAI,eAAEiJ,EAAc,cAAEC,EAAa,YAAEf,GAAgB9N,EAO7D,aANuBwO,EAAAA,EAAIM,KAAK,UAAUH,cAAqB,CAC7DhJ,OACAoJ,OAAQH,EACRC,gBACAf,iBAEcrO,IAClB,CAAE,MAAO6B,GACP,MAAM,IAAInB,MAAM,0BAClB,GAGWkD,EAAmBjD,MAC9BoM,EACAxM,KAEA,IAEE,aADuBwO,EAAAA,EAAIM,KAAK,cAActC,WAAsBxM,IACpDP,IAClB,CAAE,MAAO6B,GACP,MAAM,IAAInB,MAAM,uBAClB,E","sources":["webpack://spotify-demo/./src/common/components/ErrorMessage.tsx","webpack://spotify-demo/./src/hooks/useClientCredentialToken.ts","webpack://spotify-demo/./src/hooks/useSearchItemsByKeyword.ts","webpack://spotify-demo/./src/apis/sarchApi.ts","webpack://spotify-demo/./src/models/search.ts","webpack://spotify-demo/./src/pages/PlaylistDetailPAge/components/SearchResultList.tsx","webpack://spotify-demo/./src/hooks/useAddItemsPlaylist.ts","webpack://spotify-demo/./src/pages/PlaylistDetailPAge/components/EmptyPlaylistWithSearch.tsx","webpack://spotify-demo/./src/pages/PlaylistDetailPAge/components/DesktopPlaylistItem.tsx","webpack://spotify-demo/./src/pages/PlaylistDetailPAge/PlaylistpageDetail.tsx","webpack://spotify-demo/./src/pages/hooks/RequireAuth.tsx","webpack://spotify-demo/./src/hooks/useGetPlaylist.ts","webpack://spotify-demo/./src/hooks/useGetPlaylistItems.ts","webpack://spotify-demo/./src/apis/playlistApi.ts"],"sourcesContent":["import { Alert, AlertTitle, Typography } from '@mui/material'\nimport React from 'react'   \n\ninterface ErrorMessageProps {\n    errorMessage: string\n}\n\nconst ErrorMessage = ({errorMessage}:ErrorMessageProps) => {\n    return (\n        <Alert severity=\"error\">\n            <AlertTitle>Error</AlertTitle>\n            <Typography variant=\"body1\">\n                {errorMessage}\n            </Typography>\n        </Alert>\n    )\n}\n\nexport default ErrorMessage","import { useQuery } from \"@tanstack/react-query\"\nimport { getClientCredentialToken } from \"../apis/authApi\"\n\n// 스포티파이 클라이언트 토큰 가져오기 \nconst useClientCredentialToken = ():string | undefined => {\n   const { data } = useQuery({\n        queryKey: [\"client-credential-token\"],\n        queryFn: getClientCredentialToken,\n    })\n    const clientCredentialToken =  data?.access_token\n    return clientCredentialToken\n}\n\nexport default useClientCredentialToken","import { useInfiniteQuery } from \"@tanstack/react-query\"\nimport searchItemsByKeyword from \"../apis/sarchApi\"\nimport { searchRequestParams } from \"../models/search\"\nimport useClientCredentialToken from \"./useClientCredentialToken\"\n\nconst useSearchItemsByKeyword = (params:searchRequestParams)=>{\n    const clientCredentialToken = useClientCredentialToken()\n\n    return useInfiniteQuery({\n        queryKey:['search', params],\n        queryFn: ({pageParam=0})=>{\n            if(!clientCredentialToken) throw new Error(\"no token available\")\n            return searchItemsByKeyword(clientCredentialToken, {...params, offset:pageParam})\n        },\n        initialPageParam:0,\n        getNextPageParam:(lastpage)=>{\n            const nextPageUrl = lastpage.tracks?.next || lastpage.artists?.next || lastpage.albums?.next || lastpage.audiobooks?.next || lastpage.shows?.next || lastpage.playlists?.next || lastpage.episodes?.next\n\n            if(nextPageUrl){\n                const nextOffset = new URL(nextPageUrl).searchParams.get(\"offset\")\n\n                return nextOffset?parseInt(nextOffset):undefined\n            }\n            return undefined\n        }\n    }\n    )\n}\n\nexport default useSearchItemsByKeyword","import axios from \"axios\"\nimport { SPOTIFY_API_URL } from \"../configs/commonConfig\"\nimport { searchRequestParams, SearchResponse } from \"../models/search\"\n\nconst searchItemsByKeyword = async(token:string, params:searchRequestParams):Promise<SearchResponse> =>{\n    try {\n        const searchParams = new URLSearchParams()\n        // 필수값 추가 \n        searchParams.append(\"q\", params.q)\n        searchParams.append(\"type\", params.type.join(\",\"))\n\n        if(params.market) searchParams.append(\"market\", params.market)\n        if(params.limit) searchParams.append(\"limit\", params.limit.toString())\n        if(params.offset) searchParams.append(\"offset\", params.offset.toString())\n        if(params.include_external) searchParams.append(\"include_external\", params.include_external)\n        \n        const response = await axios.get(`${SPOTIFY_API_URL}/search?${searchParams.toString()}`, {\n            headers:{\n                Authorization:`Bearer ${token}`,\n                \"Content-Type\":\"application/json\",\n            }\n        })\n        return response.data\n    } catch (error) {\n        throw new Error(\"fail to search by keyword\")\n    }\n}\n\nexport default searchItemsByKeyword","import { SimpleAlbum } from \"./album\"\nimport { ApiResponse } from \"./apiResponse\"\nimport { Artist } from \"./artist\"\nimport { SimplifiedPlaylist } from \"./playlist\"\nimport { Show, SimplifiedAudioBook, SimplifiedEpisode, Track } from \"./track\"\n\n// enum - 서로 연관된 값들을 하나의 그룹으로 묶어 사용하기 좋음\nexport const enum SEARCH_TYPE {\n    Track = \"track\",\n    Album = \"album\",\n    Playlist = \"playlist\",\n    Show = \"show\",\n    Episode = \"episode\",\n    AudioBook = \"audiobook\",\n    Artist = \"artist\",\n}\n\nexport interface searchRequestParams {\n    q: string\n    // \"album\", \"artist\", \"playlist\", \"track\", \"show\", \"episode\", \"audiobook\" - enum 으로 만들자 \n    type: SEARCH_TYPE[]\n    market?:string\n    limit?:number\n    offset?:number\n    include_external?:string\n\n}\n\nexport interface SearchResponse{\n    artists?:ApiResponse<Artist>\n    albums?:ApiResponse<SimpleAlbum>\n    tracks?:ApiResponse<Track>\n    playlists?:ApiResponse<SimplifiedPlaylist>\n    shows?:ApiResponse<Show>\n    episodes?:ApiResponse<SimplifiedEpisode>\n    audiobooks?:ApiResponse<SimplifiedAudioBook>\n}","import {\n  Box,\n  Typography,\n  Avatar,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TableHead,\n  Snackbar,\n} from \"@mui/material\";\nimport { Track } from \"../../../models/track\";\nimport { useInView } from \"react-intersection-observer\";\nimport { use, useEffect, useState } from \"react\";\nimport PlayArrowIcon from \"@mui/icons-material/PlayArrow\";\nimport PlaylistAddIcon from \"@mui/icons-material/PlaylistAdd\";\nimport LoadingSpinner from \"../../../common/components/LoadingSpinner\";\nimport useAddItemsPlaylist from \"../../../hooks/useAddItemsPlaylist\";\nimport useGetPlaylist from \"../../../hooks/useGetPlaylist\";\nimport { useParams } from \"react-router\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\ninterface SearchResultListProps {\n  list: Track[];\n  fetchNextPage?: () => void;\n  hasNextPage?: boolean;\n  isFetchingNextPage?: boolean;\n}\n\nconst SearchResultList = ({\n  list,\n  fetchNextPage,\n  hasNextPage,\n  isFetchingNextPage,\n}: SearchResultListProps) => {\n  const { ref, inView } = useInView();\n  const { mutate: addTrackToPlaylist } = useAddItemsPlaylist();\n  const { id: playlistId } = useParams<{ id: string }>();\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const queryClient = useQueryClient();\n  const [pendingPlaylistId, setPendingPlaylistId] = useState<string | null>(\n    null\n  );\n  // console.log('아이디 있냐',playlistId)\n\n  const handlePlaylistAddClick = (trackUri: string) => {\n    if (!playlistId) return; // 방어 코드\n\n    addTrackToPlaylist(\n      {\n        playlistId,\n        params: {\n          uris: [trackUri],\n          position: 0,\n        },\n      },\n      {\n        onSuccess: () => {\n          setSnackbarOpen(true);\n          setPendingPlaylistId(playlistId);\n        },\n      }\n    );\n  };\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n\n    if (pendingPlaylistId) {\n      queryClient.refetchQueries({\n        queryKey: [\"playlist-detail\", pendingPlaylistId],\n      });\n      queryClient.refetchQueries({\n        queryKey: [\"playlist-items\", pendingPlaylistId],\n      });\n      setPendingPlaylistId(null); // cleanup\n    }\n  };\n\n  useEffect(() => {\n    if (inView && hasNextPage && !isFetchingNextPage) {\n      fetchNextPage?.();\n    }\n  }, [inView, hasNextPage, isFetchingNextPage, fetchNextPage]);\n\n  console.log(\"searchlist\", list);\n  if (list.length === 0) return null;\n\n  return (\n    <Box>\n      <Table stickyHeader>\n        <TableHead>\n          <TableRow>\n            <TableCell>앨범</TableCell>\n            <TableCell>제목</TableCell>\n            <TableCell>아티스트</TableCell>\n            <TableCell align=\"center\">플레이리스트</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {list.map((track) => (\n            <TableRow key={track.id} hover>\n              <TableCell sx={{ borderBottom: \"none\" }}>\n                <Avatar\n                  src={track.album?.images?.[0]?.url}\n                  alt={track.name}\n                  variant=\"square\"\n                  sx={{ width: 50, height: 50, borderRadius: 1 }}\n                />\n              </TableCell>\n              <TableCell sx={{ borderBottom: \"none\" }}>\n                <Typography fontWeight={600}>{track.name}</Typography>\n              </TableCell>\n              <TableCell sx={{ borderBottom: \"none\" }}>\n                {track.artists?.map((artist) => artist.name).join(\", \")}\n              </TableCell>\n\n              <TableCell align=\"center\" sx={{ borderBottom: \"none\" }}>\n                <Button\n                  size=\"small\"\n                  color=\"secondary\"\n                  onClick={() => track.uri && handlePlaylistAddClick(track.uri)}\n                >\n                  <PlaylistAddIcon />\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n\n          {/* 무한 스크롤 트리거 */}\n          <TableRow>\n            <TableCell colSpan={5} sx={{ borderBottom: \"none\" }}>\n              <div ref={ref} style={{ height: \"1px\" }} />\n            </TableCell>\n          </TableRow>\n\n          {isFetchingNextPage && (\n            <TableRow>\n              <TableCell colSpan={5} sx={{ borderBottom: \"none\" }}>\n                <LoadingSpinner />\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n\n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={2000}\n        onClose={handleSnackbarClose}\n        message=\"플레이 리스트에 저장되었습니다!\"\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n      />\n    </Box>\n  );\n};\n\nexport default SearchResultList;\n","import { useMutation } from \"@tanstack/react-query\";\nimport { addItemsPlaylist } from \"../apis/playlistApi\";\nimport { AddTracksToPlaylistRequest, AddTracksToPlaylistResponse } from \"../models/playlist\";\n\n\ninterface MutationParams {\n    playlistId: string;\n    params: AddTracksToPlaylistRequest;\n}\n\nconst useAddItemsPlaylist = () => {\n\n    return useMutation<AddTracksToPlaylistResponse, Error, MutationParams>({\n        mutationFn: ({ playlistId, params }) =>\n        addItemsPlaylist(playlistId, params),\n\n        onSuccess: (data, variables) => {\n            console.log(\"트랙 추가 성공:\", data.snapshot_id);\n        },\n        onError: (error) => {\n        console.error(\"트랙 추가 실패:\", error.message);\n        },\n    });\n};\n\nexport default useAddItemsPlaylist;\n","import { InputAdornment, TextField, Typography } from \"@mui/material\"\nimport { useState } from \"react\"\nimport useSearchItemsByKeyword from \"../../../hooks/useSearchItemsByKeyword\"\nimport { SEARCH_TYPE } from \"../../../models/search\"\nimport SearchResultList from \"./SearchResultList\"\nimport LoadingSpinner from \"../../../common/components/LoadingSpinner\"\nimport SearchIcon from \"@mui/icons-material/Search\";\n\n\nconst EmptyPlaylistWithSearch = ()=>{\n    const handleSearchKeyword = (event:React.ChangeEvent<HTMLInputElement>)=>{\n        setKeyword(event.target.value)\n    }\n    const [ keyword, setKeyword] = useState<string>(\"\")\n\n    const {data, fetchNextPage, hasNextPage, isFetchingNextPage, isLoading} = useSearchItemsByKeyword({\n        q:keyword,\n        type:[SEARCH_TYPE.Track]\n    })\n    // console.log('ddd', data)\n\n    const flatTrackList = data?.pages.flatMap(page => page.tracks?.items ?? []) ?? [];\n\n    const isSearching = isLoading || isFetchingNextPage\n    const hasTyped = keyword.trim() !== \"\"\n\n\n    return (\n        <div>\n            <Typography variant=\"h1\" my=\"10px\">\n                Let's find somthing for your playlist\n            </Typography>\n            <TextField  value={keyword} onChange={handleSearchKeyword} placeholder=\"Search for tracks...\"  InputProps={{\n            startAdornment: (\n            <InputAdornment position=\"start\">\n                <SearchIcon />\n            </InputAdornment>\n            ),\n        }}\n        sx={{\n            width: {\n                xs: '100%',   \n                sm: '400px',  \n                md: '500px',  \n            },\n            }}\n\n        />\n             {/* 검색어 없음 */}\n            {!hasTyped && <></>}\n\n            {/* 검색 중 */}\n            {hasTyped && isSearching && <LoadingSpinner />}\n\n            {/* 검색 완료 but 결과 없음 */}\n            {hasTyped && !isSearching && flatTrackList.length === 0 && (\n            <Typography variant=\"h6\" my=\"20px\">\n                No results for: <strong>{keyword}</strong>\n            </Typography>\n            )}\n\n            {/* 검색 결과 있음 */}\n            {flatTrackList.length > 0 && (\n            <SearchResultList\n                list={flatTrackList}\n                fetchNextPage={fetchNextPage}\n                hasNextPage={hasNextPage}\n                isFetchingNextPage={isFetchingNextPage}\n            />\n            )}\n        </div>\n    )\n}\n\nexport default EmptyPlaylistWithSearch","import { styled, TableCell, TableRow } from \"@mui/material\"\nimport { Episode, Track } from \"../../../models/track\";\nimport { PlaylistTrack } from \"../../../models/playlist\";\n\n\ninterface DesktopPlaylistItemProps{\n    index:number\n    item:PlaylistTrack\n\n}\nconst HoverableRow = styled(TableRow)(({ theme }) => ({\n    cursor: 'pointer',\n    '&:hover': {\n      backgroundColor: 'rgba(255,255,255,0.08)',\n    },\n    '& td': {\n      borderBottom: 'none',\n    },\n  }));\n\n  \nconst DesktopPlaylistItem = ({item, index}:DesktopPlaylistItemProps)=>{\n    // 타입 좁히기\n    const isEpisode = (track:Track|Episode):track is Episode => {\n        return \"description\" in track \n    }\n\n    // 날짜 포맷팅 (YYYY-MM-DD)\n    const formattedDate = item.added_at\n    ? new Date(item.added_at).toISOString().split(\"T\")[0]\n    : \"Unknown\";\n    // 시간 포맷팅\n    const formatDuration = (ms: number | undefined) => {\n        if (ms === undefined) return \"Unknown\";\n        const totalSeconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(totalSeconds / 60);\n        const seconds = totalSeconds % 60;\n        return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n      };\n\n    return <HoverableRow >\n        <TableCell>{index}</TableCell>\n        <TableCell>{item.track.name || 'No name'}</TableCell>\n        <TableCell>{isEpisode(item.track)?'N/A':item.track.album?.name}</TableCell>\n        <TableCell>{formattedDate || 'Unknown'}</TableCell>\n        <TableCell>{formatDuration(item.track.duration_ms) || 'Unknown'}</TableCell>\n    </HoverableRow>\n}\n\nexport default DesktopPlaylistItem","import React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Avatar,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  styled,\r\n} from \"@mui/material\";\r\nimport { useInView } from \"react-intersection-observer\";\r\nimport { isAxiosError } from \"axios\";\r\n\r\nimport useGetPlaylist from \"../../hooks/useGetPlaylist\";\r\nimport useGetPlaylistItems from \"../../hooks/useGetPlaylistItems\";\r\n\r\nimport LoadingSpinner from \"../../common/components/LoadingSpinner\";\r\nimport ErrorMessage from \"../../common/components/ErrorMessage\";\r\nimport { PAGE_LIMIT } from \"../../configs/commonConfig\";\r\nimport useRequireAuth from \"../hooks/RequireAuth\"; // ✅ 커스텀 인증 훅\r\nimport EmptyPlaylistWithSearch from \"./components/EmptyPlaylistWithSearch\";\r\nimport DesktopPlaylistItem from \"./components/DesktopPlaylistItem\";\r\n\r\nconst DEFAULT_ALBUM = \"/music_album.webp\";\r\n\r\nconst ResponsiveAlbumImage = styled(Avatar)(({ theme }) => ({\r\n  borderRadius:\r\n    typeof theme.shape.borderRadius === \"number\"\r\n      ? theme.shape.borderRadius * 2\r\n      : parseInt(theme.shape.borderRadius, 10) * 2,\r\n  width: 200,\r\n  height: 200,\r\n  background: \"gray\",\r\n  [theme.breakpoints.down(\"md\")]: { width: 140, height: 140 },\r\n  [theme.breakpoints.down(\"sm\")]: { width: 120, height: 120 },\r\n}));\r\n\r\nconst getStatusCode = (error: unknown): number | null =>\r\n  isAxiosError(error) && error.response?.status ? error.response.status : null;\r\n\r\nconst PlaylistpageDetail = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const playlistId = id ?? \"\";\r\n  const authStatus = useRequireAuth();\r\n  const { ref, inView } = useInView();\r\n\r\n  // API 호출\r\n  const {\r\n    data: playlist,\r\n    isLoading,\r\n    error: playlistError,\r\n  } = useGetPlaylist({ playlist_id: playlistId });\r\n\r\n  const {\r\n    data: playlistItems,\r\n    error: playlistItemsError,\r\n    hasNextPage,\r\n    isFetchingNextPage,\r\n    fetchNextPage,\r\n  } = useGetPlaylistItems({ playlist_id: playlistId });\r\n\r\n  // 기타 에러\r\n  const hasOtherError =\r\n    (playlistError && getStatusCode(playlistError) !== 401) ||\r\n    (playlistItemsError && getStatusCode(playlistItemsError) !== 401);\r\n\r\n  // 무한 스크롤\r\n  useEffect(() => {\r\n    if (inView && hasNextPage && !isFetchingNextPage) {\r\n      fetchNextPage();\r\n    }\r\n  }, [inView, hasNextPage, isFetchingNextPage, fetchNextPage]);\r\n\r\n  // 인증 흐름 처리\r\n  if (authStatus === \"redirect\" || authStatus === \"unauthorized\") return null;\r\n\r\n  if (isLoading) return <LoadingSpinner />;\r\n  if (hasOtherError)\r\n    return (\r\n      <ErrorMessage errorMessage=\"플레이리스트를 불러오는 데 실패했습니다.\" />\r\n    );\r\n  if (!playlist?.name)\r\n    return <ErrorMessage errorMessage=\"잘못된 플레이리스트입니다.\" />;\r\n\r\n  const imageUrl = playlist.images?.[0]?.url || DEFAULT_ALBUM;\r\n\r\n  return (\r\n    <div>\r\n      <Box gap={4}>\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems={{ xs: \"flex-start\", sm: \"center\" }}\r\n          flexDirection={{ xs: \"column\", sm: \"row\" }}\r\n          gap={4}\r\n          sx={{ pl: 1.5 }}\r\n        >\r\n          <ResponsiveAlbumImage\r\n            variant=\"square\"\r\n            style={{ background: \"gray\", borderRadius: \"8px\" }}\r\n            src={imageUrl}\r\n            alt={playlist.name}\r\n          />\r\n          <Box\r\n            sx={{\r\n              mt: { xs: 2, sm: 0 },\r\n              textAlign: \"left\",\r\n              width: \"100%\",\r\n            }}\r\n          >\r\n            <Typography variant=\"h1\" fontSize={28} fontWeight={600}>\r\n              {playlist.name}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\" color=\"text.secondary\" mt={1}>\r\n              by {playlist.owner.display_name}\r\n            </Typography>\r\n            {playlist.description && (\r\n              <Typography mt={2} variant=\"body1\" color=\"text.primary\">\r\n                {playlist.description}\r\n              </Typography>\r\n            )}\r\n            <Typography mt={2} variant=\"body2\" color=\"text.secondary\">\r\n              곡 수: {playlist.tracks?.total ?? 0}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box\r\n        sx={{\r\n          maxHeight: \"520px\",\r\n          overflowY: \"scroll\",\r\n          \"::-webkit-scrollbar\": { display: \"none\" },\r\n          scrollbarWidth: \"none\",\r\n          msOverflowStyle: \"none\",\r\n        }}\r\n      >\r\n        {playlist?.tracks?.total === 0 ? (\r\n          <EmptyPlaylistWithSearch />\r\n        ) : (\r\n          <Table stickyHeader sx={{ backgroundColor: \"background.paper\" }}>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>#</TableCell>\r\n                <TableCell>Title</TableCell>\r\n                <TableCell>Album</TableCell>\r\n                <TableCell>Date added</TableCell>\r\n                <TableCell>Duration</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {playlistItems?.pages.flatMap((page, pageIndex) =>\r\n                page.items.map((item, itemIndex) => (\r\n                  <DesktopPlaylistItem\r\n                    key={item.track.id + \"_\" + itemIndex}\r\n                    item={item}\r\n                    index={pageIndex * PAGE_LIMIT + itemIndex + 1}\r\n                  />\r\n                ))\r\n              )}\r\n              <TableRow>\r\n                <TableCell colSpan={5} sx={{ borderBottom: \"none\" }}>\r\n                  <div ref={ref} style={{ height: \"1px\" }} />\r\n                </TableCell>\r\n              </TableRow>\r\n\r\n              {isFetchingNextPage && (\r\n                <TableRow>\r\n                  <TableCell colSpan={5} sx={{ borderBottom: \"none\" }}>\r\n                    <LoadingSpinner />\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlaylistpageDetail;\r\n","import { useEffect, useState, useRef } from 'react'\nimport { useNavigate, useLocation } from 'react-router'\n\ntype AuthStatus = 'ok' | 'redirect' | 'unauthorized'\n\nconst useRequireAuth = (): AuthStatus => {\n  const [status, setStatus] = useState<AuthStatus>('ok')\n  const navigate = useNavigate()\n  const location = useLocation()\n  const hasRedirected = useRef(false)\n\n  useEffect(() => {\n    const token = localStorage.getItem('access_token')\n\n    if (!token && !hasRedirected.current) {\n      hasRedirected.current = true\n\n      // 1. 저장된 토큰 제거\n      localStorage.removeItem('access_token')\n\n      // 2. 경고 메시지\n      alert('잘못된 접근입니다. 로그인 후 다시 이용해주세요.')\n\n      // 3. 로그인 페이지 이동\n      navigate('/', { replace: true })\n\n      // 4. 상태 설정\n      setStatus('unauthorized')\n\n      // 5. URL 깔끔하게\n      window.history.replaceState({}, document.title, '/')\n    }\n  }, [navigate, location])\n\n  return status\n}\n\nexport default useRequireAuth\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getPlaylist } from \"../apis/playlistApi\";\nimport { GetPlaylistRequest } from \"../models/playlist\";\n\nconst useGetPlaylist = (params: GetPlaylistRequest) => {\n  return useQuery({\n    queryKey: [\"playlist-detail\", params.playlist_id],\n    queryFn: () => {\n      return getPlaylist(params);\n    },\n    enabled: !!params.playlist_id,\n  });\n};\n\nexport default useGetPlaylist;\n","import { useInfiniteQuery } from \"@tanstack/react-query\";\nimport { getPlaylistItems } from \"../apis/playlistApi\";\nimport { PAGE_LIMIT } from \"../configs/commonConfig\";\n\nconst useGetPlaylistItems = (params: { playlist_id: string }) => {\n  return useInfiniteQuery({\n    queryKey: [\"playlist-items\", params.playlist_id],\n    queryFn: ({ pageParam = 0 }) =>\n      getPlaylistItems({\n        playlist_id: params.playlist_id,\n        offset: pageParam,\n        limit: PAGE_LIMIT,\n      }),\n    initialPageParam: 0,\n    getNextPageParam: (lastPage) => {\n      if (lastPage.next) {\n        const url = new URL(lastPage.next);\n        const nextOffset = url.searchParams.get(\"offset\");\n        return nextOffset ? parseInt(nextOffset) : undefined;\n      }\n      return undefined;\n    },\n  });\n};\n\nexport default useGetPlaylistItems;\n","import {\n  AddTracksToPlaylistRequest,\n  AddTracksToPlaylistResponse,\n  CreatePlaylistRequest,\n  getCurrentUserPlaylistRequest,\n  getCurrentUserPlaylistResponse,\n  GetPlaylistItemsRequest,\n  GetPlaylistItemsResponse,\n  GetPlaylistRequest,\n  Playlist,\n} from \"../models/playlist\";\nimport api from \"../utils/api\";\nimport { getClientCredentialToken } from \"./authApi\";\n\nexport const getCurrentUserPlaylist = async ({\n  limit,\n  offset,\n}: getCurrentUserPlaylistRequest): Promise<getCurrentUserPlaylistResponse> => {\n  try {\n    const response = await api.get(\"/me/playlists\", {\n      params: { limit, offset },\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to fetch current user playlist\");\n  }\n};\n\nexport const getPlaylist = async (\n  params: GetPlaylistRequest\n): Promise<Playlist> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to fetch playlist detail\");\n  }\n};\n\nexport const getPlaylistItems = async (\n  params: GetPlaylistItemsRequest\n): Promise<GetPlaylistItemsResponse> => {\n  const token = await getClientCredentialToken();\n  // console.log(\"토큰있냐\", token)\n  const { playlist_id, ...queryParams } = params;\n\n  try {\n    const response = await api.get(`playlists/${params.playlist_id}/tracks`, {\n      params: queryParams,\n      headers: {\n        Authorization: `Bearer ${token.access_token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"getPlaylistItems API Error:\", error);\n    throw new Error(\"fail to fetch playlist items\");\n  }\n};\n\nexport const createPlaylist = async (\n  user_id: string,\n  params: CreatePlaylistRequest\n): Promise<Playlist> => {\n  try {\n    const { name, playlistPublic, collaborative, description } = params;\n    const response = await api.post(`/users/${user_id}/playlists`, {\n      name,\n      public: playlistPublic,\n      collaborative,\n      description,\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to create playlist\");\n  }\n};\n\nexport const addItemsPlaylist = async (\n  playlist_id: string,\n  params: AddTracksToPlaylistRequest\n): Promise<AddTracksToPlaylistResponse> => {\n  try {\n    const response = await api.post(`/playlists/${playlist_id}/tracks`, params);\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to add playlist\");\n  }\n};\n"],"names":["_ref","errorMessage","_jsxs","Alert","severity","children","_jsx","AlertTitle","Typography","variant","useClientCredentialToken","data","useQuery","queryKey","queryFn","getClientCredentialToken","clientCredentialToken","access_token","params","useInfiniteQuery","pageParam","Error","async","token","searchParams","URLSearchParams","append","q","type","join","market","limit","toString","offset","include_external","axios","get","SPOTIFY_API_URL","headers","Authorization","error","searchItemsByKeyword","initialPageParam","getNextPageParam","lastpage","nextPageUrl","tracks","next","artists","albums","audiobooks","shows","playlists","episodes","nextOffset","URL","parseInt","undefined","SEARCH_TYPE","list","fetchNextPage","hasNextPage","isFetchingNextPage","ref","inView","useInView","mutate","addTrackToPlaylist","useMutation","mutationFn","playlistId","addItemsPlaylist","onSuccess","variables","console","log","snapshot_id","onError","message","id","useParams","snackbarOpen","setSnackbarOpen","useState","queryClient","useQueryClient","pendingPlaylistId","setPendingPlaylistId","useEffect","length","Box","Table","stickyHeader","TableHead","TableRow","TableCell","align","TableBody","map","track","hover","sx","borderBottom","Avatar","src","album","images","url","alt","name","width","height","borderRadius","fontWeight","artist","Button","size","color","onClick","uri","trackUri","uris","position","PlaylistAddIcon","colSpan","style","LoadingSpinner","Snackbar","open","autoHideDuration","onClose","handleSnackbarClose","refetchQueries","anchorOrigin","vertical","horizontal","EmptyPlaylistWithSearch","keyword","setKeyword","isLoading","useSearchItemsByKeyword","Track","flatTrackList","pages","flatMap","page","items","isSearching","hasTyped","trim","my","TextField","value","onChange","event","target","placeholder","InputProps","startAdornment","InputAdornment","SearchIcon","xs","sm","md","_Fragment","SearchResultList","HoverableRow","styled","theme","cursor","backgroundColor","_ref2","item","index","formattedDate","added_at","Date","toISOString","split","ms","totalSeconds","Math","floor","padStart","formatDuration","duration_ms","ResponsiveAlbumImage","shape","background","breakpoints","down","getStatusCode","isAxiosError","response","status","PlaylistpageDetail","authStatus","useRequireAuth","setStatus","navigate","useNavigate","location","useLocation","hasRedirected","useRef","localStorage","getItem","current","removeItem","alert","replace","window","history","replaceState","document","title","playlist","playlistError","playlist_id","getPlaylist","enabled","playlistItems","playlistItemsError","getPlaylistItems","PAGE_LIMIT","lastPage","useGetPlaylistItems","hasOtherError","ErrorMessage","imageUrl","gap","display","alignItems","flexDirection","pl","mt","textAlign","fontSize","owner","display_name","description","total","maxHeight","overflowY","scrollbarWidth","msOverflowStyle","pageIndex","itemIndex","DesktopPlaylistItem","getCurrentUserPlaylist","api","queryParams","createPlaylist","user_id","playlistPublic","collaborative","post","public"],"sourceRoot":""}
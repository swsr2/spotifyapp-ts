{"version":3,"file":"617.js?ver=e312d7c6a9b65b43b49a","mappings":"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","sources":["webpack://spotify-demo/./src/common/components/ErrorMessage.tsx","webpack://spotify-demo/./node_modules/@mui/icons-material/esm/Bookmark.js","webpack://spotify-demo/./src/apis/userApi.ts","webpack://spotify-demo/./src/hooks/useGetCurrentUserProfile.ts","webpack://spotify-demo/./node_modules/@mui/icons-material/esm/Add.js","webpack://spotify-demo/./node_modules/@mui/material/esm/Card/cardClasses.js","webpack://spotify-demo/./node_modules/@mui/material/esm/Card/Card.js","webpack://spotify-demo/./src/pages/Playlistpage.tsx","webpack://spotify-demo/./src/hooks/useGetCurrentUserPlaylist.ts","webpack://spotify-demo/./src/utils/crypto.ts","webpack://spotify-demo/./src/utils/auth.ts","webpack://spotify-demo/./src/Layout/components/hooks/HandlePlaylistCreate.ts","webpack://spotify-demo/./src/hooks/useCreatePlaylist.ts","webpack://spotify-demo/./src/apis/playlistApi.ts","webpack://spotify-demo/./src/Layout/components/EmptyPlaylist.tsx","webpack://spotify-demo/./src/Layout/components/Playlist.tsx","webpack://spotify-demo/./src/Layout/components/PlaylistHead.tsx"],"sourcesContent":["import { Alert, AlertTitle, Typography } from '@mui/material'\nimport React from 'react'   \n\ninterface ErrorMessageProps {\n    errorMessage: string\n}\n\nconst ErrorMessage = ({errorMessage}:ErrorMessageProps) => {\n    return (\n        <Alert severity=\"error\">\n            <AlertTitle>Error</AlertTitle>\n            <Typography variant=\"body1\">\n                {errorMessage}\n            </Typography>\n        </Alert>\n    )\n}\n\nexport default ErrorMessage","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2\"\n}), 'Bookmark');","import { User } from \"../models/user\"\nimport api from \"../utils/api\"\n\nexport const getCurrentUserProfile=async():Promise<User>=>{\n    try {\n\n        const response = await api.get(`/me`)\n        return response.data\n    } catch (error) {\n        throw new Error(\"Failed to get current user profile\")\n    }\n}\n\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getCurrentUserProfile } from \"../apis/userApi\";\n\n\n// 로그인 성공했을때 사용 \nconst useGetCurrentUserProfile = () => {\n    const accessToken = localStorage.getItem('access_token')\n   \n    return useQuery({\n        queryKey: ['currentUserProfile'],\n        queryFn: () => getCurrentUserProfile(),\n        enabled: !!accessToken,\n        staleTime: 1000*60*5,\n        retry: false,        \n    })\n}\n\nexport default useGetCurrentUserProfile;","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z\"\n}), 'Add');","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Paper from \"../Paper/index.js\";\nimport { getCardUtilityClass } from \"./cardClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root'\n})({\n  overflow: 'hidden'\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n  const {\n    className,\n    raised = false,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    raised\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, {\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import React from \"react\";\nimport { Box } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\nimport PlaylistHead from \"../Layout/components/PlaylistHead\";\nimport Playlist from \"../Layout/components/Playlist\";\n\nconst PlaylistContainer = styled(Box)({\n  flexGrow: 1,\n  display: \"flex\",\n  flexDirection: \"column\",\n  overflow: \"hidden\",\n});\n\nconst PlaylistScrollArea = styled(\"div\")({\n  flexGrow: 1,\n  overflowY: \"auto\",\n  scrollbarWidth: \"none\",\n  msOverflowStyle: \"none\",\n  \"&::-webkit-scrollbar\": {\n    display: \"none\",\n  },\n});\n\nconst Playlistpage = () => {\n  return (\n    <PlaylistContainer>\n      <Box sx={{ flexShrink: 0 }}>\n        <PlaylistHead />\n      </Box>\n      <PlaylistScrollArea>\n        <Playlist />\n      </PlaylistScrollArea>\n    </PlaylistContainer>\n  );\n};\n\nexport default Playlistpage;\n","import { useInfiniteQuery } from \"@tanstack/react-query\"\nimport { getCurrentUserPlaylistRequest } from \"../models/playlist\"\nimport { getCurrentUserPlaylist } from \"../apis/playlistApi\"\n\n\nconst useGetCurrentUserPlaylist =({limit,offset}:getCurrentUserPlaylistRequest)=>{\n    return useInfiniteQuery({\n        queryKey:['current-user-playlists'],\n        queryFn:({pageParam = 0 })=>{\n            return getCurrentUserPlaylist({limit, offset:pageParam})\n        },\n        initialPageParam:0,\n        getNextPageParam:(lastPage)=>{\n            if(lastPage.next){\n                const url = new URL(lastPage.next)\n                const nextOffset = url.searchParams.get(\"offset\")\n                return nextOffset ? parseInt(nextOffset): undefined\n            }\n            return undefined\n        }\n    })\n}\nexport default useGetCurrentUserPlaylist","export const generateRandomString = (length: number) :string=> {\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const values = crypto.getRandomValues(new Uint8Array(length));\n    return values.reduce((acc, x) => acc + possible[x % possible.length], \"\");\n  }\n  \n \n  export const sha256 = async (plain:string):Promise<ArrayBuffer> => {\n    const encoder = new TextEncoder()\n    const data = encoder.encode(plain)\n    return window.crypto.subtle.digest('SHA-256', data)\n  }\n  \n  export const base64encode = (input:ArrayBuffer):string => {\n    return btoa(String.fromCharCode(...new Uint8Array(input)))\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_');\n  }\n  \n  ","import { CLIENT_ID, SCOPES } from \"../configs/authConfig\";\nimport { REDIRECT_URI } from \"../configs/commonConfig\";\nimport { AuthUrlParams } from \"../models/auth\";\nimport { base64encode, generateRandomString, sha256 } from \"./crypto\";\n\n// 로그인 관련 함수 \nexport const getSpotifyAuthUrl = async () => {\n    const codeVerifier = generateRandomString(64);\n    const hashed = await sha256(codeVerifier)\n    const codeChallenge = base64encode(hashed);\n    \n    const clientId = CLIENT_ID;\n    const redirectUri = REDIRECT_URI;\n\n    const scope = SCOPES;\n    const authUrl = new URL(\"https://accounts.spotify.com/authorize\")\n\n    // generated in the previous step\n    window.localStorage.setItem('code_verifier', codeVerifier);\n\n    if(clientId && redirectUri){\n        const params:AuthUrlParams =  {\n            response_type: 'code',\n            client_id: clientId,\n            scope,\n            code_challenge_method: 'S256',\n            code_challenge: codeChallenge,\n            redirect_uri: redirectUri,\n            }\n        \n            authUrl.search = new URLSearchParams(Object.entries(params)).toString();\n            window.location.href = authUrl.toString();\n    }\n}","import useGetCurrentUserProfile from \"../../../hooks/useGetCurrentUserProfile\";\nimport useCreatePlaylist from \"../../../hooks/useCreatePlaylist\";\nimport { getSpotifyAuthUrl } from \"../../../utils/auth\";\n\nconst useHandlePlaylistCreate = () => {\n  const { data: user } = useGetCurrentUserProfile();\n  const { mutate: createPlaylist } = useCreatePlaylist();\n\n  const handleCreate = () => {\n    if (user) {\n      createPlaylist({ name: \"내 플레이리스트\" });\n    } else {\n      alert(\"로그인이 필요합니다.\");\n      getSpotifyAuthUrl();\n    }\n  };\n\n  return { handleCreate };\n};\n\nexport default useHandlePlaylistCreate;\n","import { useMutation, useQueries, useQueryClient } from \"@tanstack/react-query\"\nimport { createPlaylist } from \"../apis/playlistApi\"\nimport useGetCurrentUserProfile from \"./useGetCurrentUserProfile\"\nimport { CreatePlaylistRequest } from \"../models/playlist\"\n\nconst useCreatePlaylist = ()=>{\n    const queryClient =  useQueryClient()\n    // user_id 가져오기 \n    const {data:user} = useGetCurrentUserProfile()\n    // console.log(\"확인\", user)\n    // post - mutation\n    return useMutation({\n        mutationFn:(params:CreatePlaylistRequest)=>{\n            if(user?.id){\n                return createPlaylist(user.id, params)     \n            }\n            return Promise.reject(new Error(\"user is not defined\"))\n        },\n        onSuccess:()=>{\n            // 플레이리스트 ui 업데이트 처리 \n            queryClient.invalidateQueries({queryKey:[\"current-user-playlists\"]})\n            // console.log(\"성공\")\n        }\n    })\n}\n\nexport default useCreatePlaylist","import {\n  AddTracksToPlaylistRequest,\n  AddTracksToPlaylistResponse,\n  CreatePlaylistRequest,\n  getCurrentUserPlaylistRequest,\n  getCurrentUserPlaylistResponse,\n  GetPlaylistItemsRequest,\n  GetPlaylistItemsResponse,\n  GetPlaylistRequest,\n  Playlist,\n} from \"../models/playlist\";\nimport api from \"../utils/api\";\nimport { getClientCredentialToken } from \"./authApi\";\n\nexport const getCurrentUserPlaylist = async ({\n  limit,\n  offset,\n}: getCurrentUserPlaylistRequest): Promise<getCurrentUserPlaylistResponse> => {\n  try {\n    const response = await api.get(\"/me/playlists\", {\n      params: { limit, offset },\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to fetch current user playlist\");\n  }\n};\n\nexport const getPlaylist = async (\n  params: GetPlaylistRequest\n): Promise<Playlist> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to fetch playlist detail\");\n  }\n};\n\nexport const getPlaylistItems = async (\n  params: GetPlaylistItemsRequest\n): Promise<GetPlaylistItemsResponse> => {\n  const token = await getClientCredentialToken();\n  // console.log(\"토큰있냐\", token)\n  const { playlist_id, ...queryParams } = params;\n\n  try {\n    const response = await api.get(`playlists/${params.playlist_id}/tracks`, {\n      params: queryParams,\n      headers: {\n        Authorization: `Bearer ${token.access_token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"getPlaylistItems API Error:\", error);\n    throw new Error(\"fail to fetch playlist items\");\n  }\n};\n\nexport const createPlaylist = async (\n  user_id: string,\n  params: CreatePlaylistRequest\n): Promise<Playlist> => {\n  try {\n    const { name, playlistPublic, collaborative, description } = params;\n    const response = await api.post(`/users/${user_id}/playlists`, {\n      name,\n      public: playlistPublic,\n      collaborative,\n      description,\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to create playlist\");\n  }\n};\n\nexport const addItemsPlaylist = async (\n  playlist_id: string,\n  params: AddTracksToPlaylistRequest\n): Promise<AddTracksToPlaylistResponse> => {\n  try {\n    const response = await api.post(`/playlists/${playlist_id}/tracks`, params);\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to add playlist\");\n  }\n};\n","import { Button, Card, styled, Typography } from '@mui/material'\nimport React from 'react'\nimport useHandlePlaylistCreate from './hooks/HandlePlaylistCreate';\n\nconst EmptyPlaylistCard = styled(Card)(({ theme }) => ({\n  backgroundColor: theme.palette.background.paper,\n  padding: \"20px\",\n  borderRadius: \"8px\",\n}));\n\nconst CreatePlaylistButton = styled(Button)({\n  marginTop: \"20px\",\n  fontWeight: \"700\",\n});\n\n// 빈 플레이리스트 컴포넌트    \nconst EmptyPlaylist = () => {\n const { handleCreate } = useHandlePlaylistCreate()\n \n  return (\n    <EmptyPlaylistCard>\n     <Typography variant=\"h2\" fontWeight={700}>\n        Create your first playlist\n      </Typography>\n      <Typography variant=\"body2\">It's easy, we'll help you</Typography>\n      <CreatePlaylistButton variant=\"contained\" color=\"secondary\" onClick={handleCreate}>\n        Create playlist\n      </CreatePlaylistButton>  \n    </EmptyPlaylistCard>\n  )\n}\n\nexport default EmptyPlaylist","import React, { useEffect, useState } from \"react\";\nimport EmptyPlaylist from \"./EmptyPlaylist\";\nimport useGetCurrentUserPlaylist from \"../../hooks/useGetCurrentUserPlaylist\";\nimport LoadingSpinner from \"../../common/components/LoadingSpinner\";\nimport ErrorMessage from \"../../common/components/ErrorMessage\";\nimport { useInView } from \"react-intersection-observer\";\nimport useGetCurrentUserProfile from \"../../hooks/useGetCurrentUserProfile\";\nimport { useNavigate } from \"react-router\";\nimport { PAGE_LIMIT } from \"../../configs/commonConfig\";\nimport { styled } from \"@mui/material\";\n\nconst DEFAULT_ALBUM = \"/music_album.webp\";\n\ninterface PlaylistItemProps {\n  selected?: boolean;\n}\n\nconst HoverablePlaylistItem = styled(\"div\", {\n  shouldForwardProp: (prop) => prop !== \"selected\",\n})<PlaylistItemProps>(({ theme, selected }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  margin: \"20px 0\",\n  padding: \"8px\",\n  borderRadius: \"6px\",\n  cursor: \"pointer\",\n  transition: \"background-color 0.3s, color 0.3s\",\n  color: selected ? \"#1ed760\" : theme.palette.text.primary,\n  \"&:hover\": {\n    backgroundColor: \"rgba(255,255,255,0.08)\",\n  },\n}));\n\nconst Playlist = () => {\n  const navigate = useNavigate();\n  const [selectedId, setSelectedId] = useState<string | null>(null);\n  const { ref, inView } = useInView();\n  const {\n    data,\n    isLoading,\n    error,\n    hasNextPage,\n    isFetchingNextPage,\n    fetchNextPage,\n  } = useGetCurrentUserPlaylist({ limit: PAGE_LIMIT, offset: 0 });\n\n  const { data: user } = useGetCurrentUserProfile();\n\n  useEffect(() => {\n    if (inView && hasNextPage && !isFetchingNextPage) {\n      fetchNextPage();\n    }\n  }, [inView, hasNextPage, isFetchingNextPage, fetchNextPage]);\n\n  if (!user) return <EmptyPlaylist />;\n  if (isLoading) return <LoadingSpinner />;\n  if (error) return <ErrorMessage errorMessage={error.message} />;\n\n  // console.log('데이터', data)\n\n  const playlists = data?.pages.flatMap((page) => page.items) || [];\n\n  return (\n    <div\n      style={{\n        maxHeight: \"100vh\",\n        overflowY: \"auto\",\n        scrollbarWidth: \"none\",\n        msOverflowStyle: \"none\",\n      }}\n    >\n      {playlists.length === 0 ? (\n        <EmptyPlaylist />\n      ) : (\n        <>\n          {playlists.map((playlist) => {\n            const imageUrl = playlist.images?.[0]?.url || DEFAULT_ALBUM;\n            const isSelected = selectedId === playlist.id;\n            const handleClick = (id: string) => {\n              // console.log('클릭한 플레이리스트 ID:', id)\n              setSelectedId(id);\n              navigate(`/playlist/${id}`);\n            };\n\n            return (\n              <HoverablePlaylistItem\n                key={playlist.id}\n                selected={isSelected}\n                onClick={() => handleClick(playlist.id!)}\n              >\n                <img\n                  src={imageUrl}\n                  alt={playlist.name}\n                  onError={(e) => {\n                    e.currentTarget.src = DEFAULT_ALBUM;\n                  }}\n                  style={{\n                    width: 40,\n                    height: 40,\n                    objectFit: \"cover\",\n                    background: \"gray\",\n                    marginRight: 8,\n                    borderRadius: \"8px\",\n                  }}\n                />\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    alignItems: \"flex-start\",\n                  }}\n                >\n                  <div>{playlist.name}</div>\n                  <div>플레이리스트 {playlist.owner.display_name}</div>\n                </div>\n              </HoverablePlaylistItem>\n            );\n          })}\n          <div ref={ref} style={{ height: \"1px\" }} />\n          {isFetchingNextPage && <LoadingSpinner />}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Playlist;\n","import BookmarkIcon from '@mui/icons-material/Bookmark';\nimport AddIcon from '@mui/icons-material/Add';  \nimport { styled, Box, Typography, Button } from '@mui/material';\nimport useHandlePlaylistCreate from './hooks/HandlePlaylistCreate';\n\n\nconst PlaylistHeadContainer = styled(\"div\")({\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"8px\",\n    justifyContent: \"space-between\",\n\n})\n\n// 플레이리스트 헤더 컴포넌트 \nconst PlaylistHead = () => {\n  const { handleCreate } = useHandlePlaylistCreate()\n\n  return (\n    <PlaylistHeadContainer>\n      <Box display=\"flex\">\n        <BookmarkIcon sx={{ marginRight: \"20px\" }} />\n        <Typography variant=\"h2\" fontWeight={700}>My Playlist</Typography>\n        </Box>\n        <Button onClick={handleCreate}>\n        <AddIcon color=\"primary\" />\n        </Button>\n    </PlaylistHeadContainer>\n  \n  )\n}\n\nexport default PlaylistHead"],"names":["_ref","errorMessage","_jsxs","Alert","severity","children","_jsx","AlertTitle","Typography","variant","d","useGetCurrentUserProfile","accessToken","localStorage","getItem","useQuery","queryKey","queryFn","async","api","get","data","error","Error","getCurrentUserProfile","enabled","staleTime","retry","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","CardRoot","styled","Paper","name","overflow","inProps","ref","props","className","raised","other","ownerState","classes","composeClasses","root","useUtilityClasses","clsx","elevation","undefined","PlaylistContainer","Box","flexGrow","display","flexDirection","PlaylistScrollArea","overflowY","scrollbarWidth","msOverflowStyle","Playlistpage","sx","flexShrink","PlaylistHead","Playlist","limit","offset","useInfiniteQuery","_ref2","pageParam","getCurrentUserPlaylist","initialPageParam","getNextPageParam","lastPage","next","nextOffset","URL","searchParams","parseInt","getSpotifyAuthUrl","codeVerifier","crypto","getRandomValues","Uint8Array","reduce","acc","x","possible","codeChallenge","input","TextEncoder","encode","plain","window","subtle","digest","sha256","btoa","String","fromCharCode","replace","clientId","CLIENT_ID","redirectUri","REDIRECT_URI","scope","SCOPES","authUrl","setItem","params","response_type","client_id","code_challenge_method","code_challenge","redirect_uri","search","URLSearchParams","Object","entries","toString","location","href","useHandlePlaylistCreate","user","mutate","createPlaylist","useCreatePlaylist","queryClient","useQueryClient","useMutation","mutationFn","id","Promise","reject","onSuccess","invalidateQueries","handleCreate","alert","getPlaylist","playlist_id","getPlaylistItems","token","getClientCredentialToken","queryParams","headers","Authorization","access_token","console","user_id","playlistPublic","collaborative","description","post","public","addItemsPlaylist","EmptyPlaylistCard","Card","theme","backgroundColor","palette","background","paper","padding","borderRadius","CreatePlaylistButton","Button","marginTop","fontWeight","EmptyPlaylist","color","onClick","DEFAULT_ALBUM","HoverablePlaylistItem","shouldForwardProp","prop","selected","alignItems","margin","cursor","transition","text","primary","navigate","useNavigate","selectedId","setSelectedId","useState","inView","useInView","isLoading","hasNextPage","isFetchingNextPage","fetchNextPage","useGetCurrentUserPlaylist","PAGE_LIMIT","useEffect","LoadingSpinner","ErrorMessage","message","playlists","pages","flatMap","page","items","style","maxHeight","length","_Fragment","map","playlist","imageUrl","images","url","isSelected","handleClick","src","alt","onError","e","currentTarget","width","height","objectFit","marginRight","owner","display_name","PlaylistHeadContainer","justifyContent","BookmarkIcon","AddIcon"],"sourceRoot":""}
{"version":3,"file":"265.js?ver=e312d7c6a9b65b43b49a","mappings":"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","sources":["webpack://spotify-demo/./src/hooks/useClientCredentialToken.ts","webpack://spotify-demo/./src/apis/albumApi.ts","webpack://spotify-demo/./src/hooks/useSearchItemsByKeyword.ts","webpack://spotify-demo/./src/apis/sarchApi.ts","webpack://spotify-demo/./src/common/components/PlayButton.tsx","webpack://spotify-demo/./src/hooks/useGetCurrentUserPlaylist.ts","webpack://spotify-demo/./src/utils/crypto.ts","webpack://spotify-demo/./src/utils/auth.ts","webpack://spotify-demo/./src/apis/categoryApi.ts","webpack://spotify-demo/./src/pages/SearchPage/components/CategoryCard.tsx","webpack://spotify-demo/./src/pages/SearchPage/components/PlaylistSelectPopover.tsx","webpack://spotify-demo/./src/pages/SearchPage/components/TopResult.tsx","webpack://spotify-demo/./src/pages/SearchPage/components/TrackTable.tsx","webpack://spotify-demo/./src/pages/SearchPage/components/ArtistSection.tsx","webpack://spotify-demo/./src/pages/SearchPage/components/AlbumSection.tsx","webpack://spotify-demo/./src/pages/SearchPage/components/SearchResultSection.tsx","webpack://spotify-demo/./src/hooks/useArtists.ts","webpack://spotify-demo/./src/apis/artistApi.ts","webpack://spotify-demo/./src/hooks/useAlbums.ts","webpack://spotify-demo/./src/pages/SearchPage/Searchpage.tsx","webpack://spotify-demo/./src/hooks/useGetCategory.ts","webpack://spotify-demo/./src/models/search.ts","webpack://spotify-demo/./src/apis/playlistApi.ts"],"sourcesContent":["import { useQuery } from \"@tanstack/react-query\"\nimport { getClientCredentialToken } from \"../apis/authApi\"\n\n// 스포티파이 클라이언트 토큰 가져오기 \nconst useClientCredentialToken = ():string | undefined => {\n   const { data } = useQuery({\n        queryKey: [\"client-credential-token\"],\n        queryFn: getClientCredentialToken,\n    })\n    const clientCredentialToken =  data?.access_token\n    return clientCredentialToken\n}\n\nexport default useClientCredentialToken","import axios from \"axios\";\nimport { SPOTIFY_API_URL } from \"../configs/commonConfig\";\nimport {\n  AlbumTracksResponse,\n  GetAlbumsResponse,\n  GetNewReleasesResponse,\n} from \"../models/album\";\nimport api from \"../utils/api\";\n\nexport const getNewReleases = async (\n  clientCredentialToken: string\n): Promise<GetNewReleasesResponse> => {\n  try {\n    const response = await axios.get(\n      `${SPOTIFY_API_URL}/browse/new-releases?limit=12`,\n      {\n        headers: {\n          Authorization: `Bearer ${clientCredentialToken}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to fetch new releases\");\n  }\n};\n\nexport const getAlbumsByIds = async (\n  ids: string[],\n  token: string\n): Promise<GetAlbumsResponse> => {\n  try {\n    const response = await api.get(`${SPOTIFY_API_URL}/albums`, {\n      params: {\n        ids: ids.join(\",\"),\n      },\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error: any) {\n    console.error(\n      \"getAlbumsByIds API Error:\",\n      error.response?.data || error.message\n    );\n    throw new Error(\"Failed to fetch albums by ids\");\n  }\n};\n\nexport const getAlbumTracks = async (\n  albumId: string,\n  token: string\n): Promise<AlbumTracksResponse> => {\n  try {\n    const response = await axios.get(\n      `${SPOTIFY_API_URL}/albums/${albumId}/tracks`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error(\"getAlbumTracks API Error:\", error);\n    throw new Error(\"Failed to fetch album tracks\");\n  }\n};\n","import { useInfiniteQuery } from \"@tanstack/react-query\"\nimport searchItemsByKeyword from \"../apis/sarchApi\"\nimport { searchRequestParams } from \"../models/search\"\nimport useClientCredentialToken from \"./useClientCredentialToken\"\n\nconst useSearchItemsByKeyword = (params:searchRequestParams)=>{\n    const clientCredentialToken = useClientCredentialToken()\n\n    return useInfiniteQuery({\n        queryKey:['search', params],\n        queryFn: ({pageParam=0})=>{\n            if(!clientCredentialToken) throw new Error(\"no token available\")\n            return searchItemsByKeyword(clientCredentialToken, {...params, offset:pageParam})\n        },\n        initialPageParam:0,\n        getNextPageParam:(lastpage)=>{\n            const nextPageUrl = lastpage.tracks?.next || lastpage.artists?.next || lastpage.albums?.next || lastpage.audiobooks?.next || lastpage.shows?.next || lastpage.playlists?.next || lastpage.episodes?.next\n\n            if(nextPageUrl){\n                const nextOffset = new URL(nextPageUrl).searchParams.get(\"offset\")\n\n                return nextOffset?parseInt(nextOffset):undefined\n            }\n            return undefined\n        }\n    }\n    )\n}\n\nexport default useSearchItemsByKeyword","import axios from \"axios\"\nimport { SPOTIFY_API_URL } from \"../configs/commonConfig\"\nimport { searchRequestParams, SearchResponse } from \"../models/search\"\n\nconst searchItemsByKeyword = async(token:string, params:searchRequestParams):Promise<SearchResponse> =>{\n    try {\n        const searchParams = new URLSearchParams()\n        // 필수값 추가 \n        searchParams.append(\"q\", params.q)\n        searchParams.append(\"type\", params.type.join(\",\"))\n\n        if(params.market) searchParams.append(\"market\", params.market)\n        if(params.limit) searchParams.append(\"limit\", params.limit.toString())\n        if(params.offset) searchParams.append(\"offset\", params.offset.toString())\n        if(params.include_external) searchParams.append(\"include_external\", params.include_external)\n        \n        const response = await axios.get(`${SPOTIFY_API_URL}/search?${searchParams.toString()}`, {\n            headers:{\n                Authorization:`Bearer ${token}`,\n                \"Content-Type\":\"application/json\",\n            }\n        })\n        return response.data\n    } catch (error) {\n        throw new Error(\"fail to search by keyword\")\n    }\n}\n\nexport default searchItemsByKeyword","import { styled } from \"@mui/material\";\nimport React from \"react\";\n\nconst PlayButtonContainer = styled(\"button\")(({ theme }) => ({\n  backgroundColor: theme.palette.primary.main,\n  border: \"none\",\n  borderRadius: \"50%\",\n  width: \"50px\",\n  height: \"50px\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  cursor: \"pointer\",\n  boxShadow: \"rgba(0, 0, 0, 0.3) 0px 8px 8px 0px\",\n  \"&:focus\": {\n    outline: \"none\",\n  },\n}));\n\nconst PlayButton: React.FC = () => {\n  return (\n    <PlayButtonContainer>\n      <svg\n        width=\"24\"\n        height=\"24\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M8 5v14l11-7z\" fill=\"black\" />\n      </svg>\n    </PlayButtonContainer>\n  );\n};\n\nexport default PlayButton;\n  ","import { useInfiniteQuery } from \"@tanstack/react-query\"\nimport { getCurrentUserPlaylistRequest } from \"../models/playlist\"\nimport { getCurrentUserPlaylist } from \"../apis/playlistApi\"\n\n\nconst useGetCurrentUserPlaylist =({limit,offset}:getCurrentUserPlaylistRequest)=>{\n    return useInfiniteQuery({\n        queryKey:['current-user-playlists'],\n        queryFn:({pageParam = 0 })=>{\n            return getCurrentUserPlaylist({limit, offset:pageParam})\n        },\n        initialPageParam:0,\n        getNextPageParam:(lastPage)=>{\n            if(lastPage.next){\n                const url = new URL(lastPage.next)\n                const nextOffset = url.searchParams.get(\"offset\")\n                return nextOffset ? parseInt(nextOffset): undefined\n            }\n            return undefined\n        }\n    })\n}\nexport default useGetCurrentUserPlaylist","export const generateRandomString = (length: number) :string=> {\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const values = crypto.getRandomValues(new Uint8Array(length));\n    return values.reduce((acc, x) => acc + possible[x % possible.length], \"\");\n  }\n  \n \n  export const sha256 = async (plain:string):Promise<ArrayBuffer> => {\n    const encoder = new TextEncoder()\n    const data = encoder.encode(plain)\n    return window.crypto.subtle.digest('SHA-256', data)\n  }\n  \n  export const base64encode = (input:ArrayBuffer):string => {\n    return btoa(String.fromCharCode(...new Uint8Array(input)))\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_');\n  }\n  \n  ","import { CLIENT_ID, SCOPES } from \"../configs/authConfig\";\nimport { REDIRECT_URI } from \"../configs/commonConfig\";\nimport { AuthUrlParams } from \"../models/auth\";\nimport { base64encode, generateRandomString, sha256 } from \"./crypto\";\n\n// 로그인 관련 함수 \nexport const getSpotifyAuthUrl = async () => {\n    const codeVerifier = generateRandomString(64);\n    const hashed = await sha256(codeVerifier)\n    const codeChallenge = base64encode(hashed);\n    \n    const clientId = CLIENT_ID;\n    const redirectUri = REDIRECT_URI;\n\n    const scope = SCOPES;\n    const authUrl = new URL(\"https://accounts.spotify.com/authorize\")\n\n    // generated in the previous step\n    window.localStorage.setItem('code_verifier', codeVerifier);\n\n    if(clientId && redirectUri){\n        const params:AuthUrlParams =  {\n            response_type: 'code',\n            client_id: clientId,\n            scope,\n            code_challenge_method: 'S256',\n            code_challenge: codeChallenge,\n            redirect_uri: redirectUri,\n            }\n        \n            authUrl.search = new URLSearchParams(Object.entries(params)).toString();\n            window.location.href = authUrl.toString();\n    }\n}","import { CategoryListResponse } from \"../models/category\";\nimport api from \"../utils/api\";\n\nexport const getCategories = async (): Promise<CategoryListResponse> => {\n  try {\n    const response = await api.get(`/browse/categories?country=ko_KR&limit=20`);\n    return response.data;\n  } catch (error) {\n    throw new Error(\"Failed to fetch category\");\n  }\n};\n","import { Card, Typography, Box } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\nconst getRandomColor = () => {\n  const colors = [\n    \"#EF9A9A\",\n    \"#CE93D8\",\n    \"#90CAF9\",\n    \"#A5D6A7\",\n    \"#FFF59D\",\n    \"#FFCC80\",\n  ];\n  return colors[Math.floor(Math.random() * colors.length)];\n};\n\nconst StyledCard = styled(Card, {\n  shouldForwardProp: (prop) => prop !== \"bgcolor\",\n})<{ bgcolor: string }>(({ bgcolor }) => ({\n  // height: 240,\n  aspectRatio: \"3 / 2\",\n  borderRadius: 16,\n  padding: 16,\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"space-between\",\n  color: \"#fff\",\n  position: \"relative\",\n  overflow: \"hidden\",\n  backgroundColor: bgcolor,\n}));\n\nconst CategoryImage = styled(\"img\")({\n  width: \"100%\",\n  height: \"100%\",\n  objectFit: \"contain\",\n  opacity: 0.9,\n  transform: \"rotate(15deg)\",\n  transformOrigin: \"bottom right\",\n});\nconst ImageWrapper = styled(Box)({\n  position: \"absolute\",\n  bottom: -18,\n  right: 0,\n  width: \"50%\",\n  aspectRatio: \"1/1\",\n  overflow: \"visible\",\n});\n\nconst CategoryCard = ({ name, image }: { name: string; image: string }) => {\n  const randomColor = getRandomColor();\n\n  return (\n    <StyledCard bgcolor={randomColor}>\n      <Typography variant=\"h6\" fontWeight={600}>\n        {name}\n      </Typography>\n      <ImageWrapper>\n        <CategoryImage src={image} alt={name} />\n      </ImageWrapper>\n    </StyledCard>\n  );\n};\n\nexport default CategoryCard;\n","import {\n  List,\n  ListItemButton,\n  ListItemText,\n  Popover,\n  Typography,\n} from \"@mui/material\";\nimport useGetCurrentUserPlaylist from \"../../../hooks/useGetCurrentUserPlaylist\";\n\ninterface PlaylistSelectModalProps {\n  open: boolean;\n  anchorEl: HTMLElement | null;\n  onClose: () => void;\n  onSelect: (playlistId: string) => void;\n}\n\nconst PlaylistSelectPopover = ({\n  open,\n  anchorEl,\n  onClose,\n  onSelect,\n}: PlaylistSelectModalProps) => {\n  const { data } = useGetCurrentUserPlaylist({ limit: 20, offset: 0 });\n\n  const playlists = data?.pages.flatMap((page) => page.items) ?? [];\n\n  return (\n    <Popover\n      open={open}\n      anchorEl={anchorEl}\n      onClose={onClose}\n      anchorOrigin={{\n        vertical: \"top\",\n        horizontal: \"left\",\n      }}\n      transformOrigin={{\n        vertical: \"top\",\n        horizontal: \"right\",\n      }}\n    >\n      <Typography variant=\"h6\" sx={{ p: 1.5, fontWeight: 600 }}>\n        My Playlists\n      </Typography>\n      <List dense sx={{ width: 250 }}>\n        {playlists.map((playlist) => (\n          <ListItemButton\n            key={playlist.id}\n            onClick={() => {\n              if (playlist.id) {\n                onSelect(playlist.id);\n                onClose();\n              }\n            }}\n          >\n            <ListItemText primary={playlist.name} />\n          </ListItemButton>\n        ))}\n      </List>\n    </Popover>\n  );\n};\n\nexport default PlaylistSelectPopover;\n","import { Box, Typography } from \"@mui/material\";\nimport { Track } from \"../../../models/track\";\n\nconst TopResult = ({ track }: { track: Track }) => {\n  return (\n    <Box p={2}>\n      <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n        Top Result\n      </Typography>\n      <Box\n        component=\"img\"\n        src={track.album?.images[0]?.url}\n        alt=\"앨범 이미지\"\n        sx={{\n          width: 100,\n          height: 100,\n          objectFit: \"cover\",\n          borderRadius: 1,\n          marginBottom: 2,\n        }}\n      />\n      <Typography variant=\"h6\">{track.name}</Typography>\n      <Typography variant=\"body2\" color=\"textSecondary\">\n        {track.artists?.map((a) => a.name).join(\", \")}\n      </Typography>\n    </Box>\n  );\n};\n\nexport default TopResult;\n","import {\n  Box,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  styled,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { Track } from \"../../../models/track\";\n\nconst AddButtonWrapper = styled(Box)({\n  opacity: 0,\n  transition: \"opacity 0.3s ease\",\n  cursor: \"pointer\",\n  \"&:hover\": {\n    opacity: 1,\n  },\n});\n\nconst HoverRow = styled(TableRow)({\n  \"&:hover\": {\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n    \"& .add-button\": {\n      opacity: 1,\n    },\n  },\n});\n\nconst formatDuration = (ms?: number) => {\n  if (typeof ms !== \"number\") return \"-\";\n  const totalSeconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n};\n\ninterface TrackTableProps {\n  tracks: Track[];\n  onAddClick: (e: React.MouseEvent<HTMLElement>, track: Track) => void;\n}\n\nconst TrackTable = ({ tracks, onAddClick }: TrackTableProps) => {\n  return (\n    <Box>\n      <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n        Songs\n      </Typography>\n      <Table sx={{ width: \"100%\" }}>\n        <TableBody>\n          {tracks.slice(0, 5).map((track, index) => (\n            <HoverRow key={index} sx={{ height: 50 }}>\n              <TableCell sx={{ width: 60, p: 1, pl: 1, borderBottom: \"none\" }}>\n                <Box>\n                  <Box\n                    component=\"img\"\n                    src={track.album?.images[0]?.url}\n                    alt=\"앨범 이미지\"\n                    sx={{\n                      width: 40,\n                      height: 40,\n                      borderRadius: 1,\n                      objectFit: \"cover\",\n                    }}\n                  />\n                </Box>\n              </TableCell>\n\n              <TableCell\n                sx={{ pl: 1, py: 0.5, borderBottom: \"none\", width: \"100%\" }}\n              >\n                <Typography variant=\"body2\" fontWeight=\"bold\" noWrap>\n                  {track.name}\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\" noWrap>\n                  {track.artists?.map((a) => a.name).join(\", \")}\n                </Typography>\n              </TableCell>\n\n              <TableCell\n                align=\"right\"\n                sx={{\n                  px: 1,\n                  py: 0.5,\n                  borderBottom: \"none\",\n                  whiteSpace: \"nowrap\",\n                  position: \"relative\",\n                }}\n              >\n                <AddButtonWrapper\n                  className=\"add-button\"\n                  onClick={(e) => onAddClick(e, track)}\n                >\n                  <AddIcon sx={{ fontSize: 20 }} />\n                </AddButtonWrapper>\n              </TableCell>\n\n              <TableCell\n                align=\"right\"\n                sx={{ px: 1, py: 0.5, borderBottom: \"none\" }}\n              >\n                {formatDuration(track.duration_ms)}\n              </TableCell>\n            </HoverRow>\n          ))}\n        </TableBody>\n      </Table>\n    </Box>\n  );\n};\n\nexport default TrackTable;\n","// ArtistSection.tsx\n\nimport { Box, Grid, Typography, styled } from \"@mui/material\";\nimport { SeveralArtistsResponse } from \"../../../models/artist\";\nimport PlayButton from \"../../../common/components/PlayButton\";\n\ninterface ArtistSectionProps {\n  artists: SeveralArtistsResponse[];\n}\n\nconst ArtistCardContainer = styled(Box)({\n  position: \"relative\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  padding: \"16px\",\n  borderRadius: \"12px\",\n  overflow: \"hidden\",\n  cursor: \"pointer\",\n  \"&:hover .overlay\": {\n    opacity: 1,\n  },\n  \"&:hover .play-button\": {\n    opacity: 1,\n    transform: \"translateY(0)\",\n  },\n});\n\nconst Overlay = styled(Box)({\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  width: \"100%\",\n  height: \"100%\",\n  backgroundColor: \"rgba(255, 255, 255, 0.1)\",\n  borderRadius: \"12px\",\n  opacity: 0,\n  pointerEvents: \"none\",\n  transition: \"opacity 0.3s ease-in-out\",\n  zIndex: 1,\n});\n\nconst ArtistPlayButtonWrapper = styled(Box)({\n  position: \"absolute\",\n  bottom: 16,\n  right: 16,\n  opacity: 0,\n  transition: \"all 0.3s ease-in-out\",\n  zIndex: 2,\n});\n\nconst ArtistSection = ({ artists }: ArtistSectionProps) => {\n  return (\n    <Box p={2}>\n      <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n        Artists\n      </Typography>\n      <Grid container spacing={2}>\n        {artists\n          .filter((artist) => !!artist?.images?.[0])\n          .slice(0, 6)\n          .map((artist) => (\n            <Grid size={{ xs: 6, sm: 4, md: 2 }} key={artist.id}>\n              <ArtistCardContainer>\n                <Overlay className=\"overlay\" />\n                <Box\n                  component=\"img\"\n                  src={artist.images?.[0]?.url}\n                  alt={artist.name}\n                  sx={{\n                    width: { xs: 80, sm: 100, md: 120 },\n                    height: { xs: 80, sm: 100, md: 120 },\n                    borderRadius: \"50%\",\n                    objectFit: \"cover\",\n                    zIndex: 0,\n                  }}\n                />\n                <Typography\n                  variant=\"body2\"\n                  align=\"center\"\n                  noWrap\n                  sx={{ mt: 1, zIndex: 2 }}\n                >\n                  {artist.name}\n                </Typography>\n                <Typography\n                  variant=\"caption\"\n                  color=\"textSecondary\"\n                  noWrap\n                  sx={{ zIndex: 2 }}\n                >\n                  Artist\n                </Typography>\n                <ArtistPlayButtonWrapper className=\"play-button\">\n                  <PlayButton />\n                </ArtistPlayButtonWrapper>\n              </ArtistCardContainer>\n            </Grid>\n          ))}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default ArtistSection;\n","// AlbumSection.tsx\n\nimport { Box, Grid, Typography } from \"@mui/material\";\nimport { FullAlbum } from \"../../../models/album\";\n\ninterface AlbumSectionProps {\n  albums: FullAlbum[];\n}\n\nconst AlbumSection = ({ albums }: AlbumSectionProps) => {\n  return (\n    <Box p={2}>\n      <Typography variant=\"h4\" fontWeight=\"bold\" gutterBottom>\n        Albums\n      </Typography>\n      <Grid container spacing={2}>\n        {albums\n          .filter((album) => !!album.images?.[0])\n          .slice(0, 6)\n          .map((album) => (\n            <Grid size={{ xs: 6, sm: 4, md: 2 }} key={album.id}>\n              <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                <Box\n                  component=\"img\"\n                  src={album.images[0].url}\n                  alt={album.name}\n                  sx={{\n                    width: { xs: 80, sm: 100, md: 120 },\n                    height: { xs: 80, sm: 100, md: 120 },\n                    borderRadius: 1,\n                    objectFit: \"cover\",\n                    mb: 1,\n                  }}\n                />\n                <Typography\n                  variant=\"body2\"\n                  noWrap\n                  sx={{\n                    maxWidth: { xs: 80, sm: 100, md: 120 },\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                    whiteSpace: \"nowrap\",\n                  }}\n                >\n                  {album.name}\n                </Typography>\n                <Typography\n                  variant=\"caption\"\n                  color=\"textSecondary\"\n                  noWrap\n                  sx={{\n                    maxWidth: { xs: 80, sm: 100, md: 120 },\n                    overflow: \"hidden\",\n                    textOverflow: \"ellipsis\",\n                    whiteSpace: \"nowrap\",\n                  }}\n                >\n                  {album.artists.map((a) => a.name).join(\", \")}\n                </Typography>\n              </Box>\n            </Grid>\n          ))}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default AlbumSection;\n","// SearchResultSection.tsx\n\nimport { Grid } from \"@mui/material\";\nimport { Track } from \"../../../models/track\";\nimport { useArtistsByIds } from \"../../../hooks/useArtists\";\nimport { useAlbumsByIds } from \"../../../hooks/useAlbums\";\nimport { useState } from \"react\";\nimport { addItemsPlaylist } from \"../../../apis/playlistApi\";\nimport PlaylistSelectPopover from \"./PlaylistSelectPopover\";\nimport TopResult from \"./TopResult\";\nimport TrackTable from \"./TrackTable\";\nimport ArtistSection from \"./ArtistSection\";\nimport AlbumSection from \"./AlbumSection\";\nimport { getSpotifyAuthUrl } from \"../../../utils/auth\";\n\ninterface SearchResultSectionProps {\n  trackList: Track[];\n  artistIds: string[];\n  albumIds: string[];\n}\n\nconst SearchResultSection = ({\n  trackList,\n  artistIds,\n  albumIds,\n}: SearchResultSectionProps) => {\n  const { data: artistsData } = useArtistsByIds(artistIds);\n  const { data: albumsResponse } = useAlbumsByIds(albumIds);\n  const albumsData = albumsResponse?.albums ?? [];\n\n  const [popoverAnchor, setPopoverAnchor] = useState<HTMLElement | null>(null);\n  const [selectedTrack, setSelectedTrack] = useState<Track | null>(null);\n\n  const handlePopoverOpen = (\n    e: React.MouseEvent<HTMLElement>,\n    track: Track\n  ) => {\n    const token = localStorage.getItem(\"access_token\");\n    if (!token) {\n      alert(\"로그인이 필요합니다.\");\n      getSpotifyAuthUrl();\n      return;\n    }\n    setSelectedTrack(track);\n    setPopoverAnchor(e.currentTarget);\n  };\n\n  const handlePopoverClose = () => {\n    setPopoverAnchor(null);\n  };\n\n  const handleAddTrack = async (playlistId: string, trackUri: string) => {\n    try {\n      await addItemsPlaylist(playlistId, { uris: [trackUri] });\n      alert(\"플레이리스트에 추가되었습니다.\");\n    } catch (error) {\n      alert(\"추가 실패\");\n    }\n  };\n\n  if (trackList.length < 4) return null;\n\n  const artistMap = new Map(\n    artistsData?.map((artist) => [artist.id, artist]) ?? []\n  );\n  const albumMap = new Map(albumsData.map((album) => [album.id, album]));\n\n  return (\n    <Grid container spacing={2}>\n      <Grid size={{ xs: 12, sm: 6 }}>\n        <TopResult track={trackList[0]} />\n      </Grid>\n      <Grid size={{ xs: 12, sm: 6 }}>\n        <TrackTable\n          tracks={trackList.slice(0, 5)}\n          onAddClick={handlePopoverOpen}\n        />\n      </Grid>\n      <Grid size={{ xs: 12 }}>\n        {\" \"}\n        <ArtistSection artists={[...artistMap.values()]} />\n      </Grid>\n      <Grid size={{ xs: 12 }}>\n        {\" \"}\n        <AlbumSection albums={[...albumMap.values()]} />\n      </Grid>\n\n      {selectedTrack && (\n        <PlaylistSelectPopover\n          open={Boolean(popoverAnchor)}\n          anchorEl={popoverAnchor}\n          onClose={handlePopoverClose}\n          onSelect={async (playlistId) => {\n            if (!selectedTrack?.uri) return;\n            await handleAddTrack(playlistId, selectedTrack.uri);\n          }}\n        />\n      )}\n    </Grid>\n  );\n};\n\nexport default SearchResultSection;\n","// import { useQuery } from \"@tanstack/react-query\";\n// import { getArtistsByIds } from \"../apis/artistApi\";\n\n// export const useArtistsByIds = (ids: string[]) => {\n//   return useQuery({\n//     queryKey: [\"artists\", ids],\n//     queryFn: () => getArtistsByIds(ids),\n//     enabled: ids.length > 0,\n//     retry: false,\n//   });\n// };\n\n// apis/artistApi.ts\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getArtistsByIds } from \"../apis/artistApi\";\nimport useClientCredentialToken from \"./useClientCredentialToken\";\n\nexport const useArtistsByIds = (ids: string[]) => {\n  const token = useClientCredentialToken();\n  return useQuery({\n    queryKey: [\"artists\", ids],\n    queryFn: () => getArtistsByIds(ids, token!),\n    enabled: ids.length > 0,\n    retry: false,\n  });\n};\n","// import api from \"../utils/api\";\n// // apis/artistApi.ts\n\n// import {\n//   SeveralArtistsApiResponse,\n//   SeveralArtistsResponse,\n// } from \"../models/artist\";\n\n// export const getArtistsByIds = async (\n//   ids: string[]\n// ): Promise<SeveralArtistsResponse[]> => {\n//   try {\n//     const response = await api.get<SeveralArtistsApiResponse>(\"/artists\", {\n//       params: {\n//         ids: ids.join(\",\"),\n//       },\n//     });\n//     return response.data.artists;\n//   } catch (error) {\n//     throw new Error(\"Failed to fetch artist information\");\n//   }\n// };\n\n// apis/artistApi.ts\n\n// apis/artistApi.ts\n\nimport axios from \"axios\";\nimport { SPOTIFY_API_URL } from \"../configs/commonConfig\";\nimport {\n  SeveralArtistsApiResponse,\n  SeveralArtistsResponse,\n} from \"../models/artist\";\n\nexport const getArtistsByIds = async (\n  ids: string[],\n  token: string\n): Promise<SeveralArtistsResponse[]> => {\n  try {\n    const response = await axios.get<SeveralArtistsApiResponse>(\n      `${SPOTIFY_API_URL}/artists`,\n      {\n        params: { ids: ids.join(\",\") },\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      }\n    );\n\n    return response.data.artists;\n  } catch (error) {\n    console.error(\"getArtistsByIds API Error:\", error);\n    throw new Error(\"Failed to fetch artist information\");\n  }\n};\n","import { useQueries, useQuery } from \"@tanstack/react-query\";\nimport { getAlbumsByIds, getAlbumTracks } from \"../apis/albumApi\";\nimport useClientCredentialToken from \"./useClientCredentialToken\";\n\nexport const useAlbumsByIds = (ids: string[]) => {\n  const token = useClientCredentialToken();\n  return useQuery({\n    queryKey: [\"albums\", ids],\n    queryFn: () => getAlbumsByIds(ids, token!),\n    enabled: ids.length > 0,\n    staleTime: 1000 * 60 * 5,\n  });\n};\n\nexport const useMultipleAlbumTracks = (albumIds: string[]) => {\n  const token = useClientCredentialToken();\n\n  const results = useQueries({\n    queries: albumIds.map((albumId) => ({\n      queryKey: [\"album-tracks\", albumId],\n      queryFn: () => getAlbumTracks(albumId, token!),\n      enabled: !!token,\n      staleTime: 1000 * 60 * 5,\n    })),\n  });\n\n  return results;\n};\n","import React, { useEffect, useState } from \"react\";\nimport { InputAdornment, TextField, Typography, Box } from \"@mui/material\";\nimport { Grid } from \"@mui/material\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport useSearchItemsByKeyword from \"../../hooks/useSearchItemsByKeyword\";\nimport { SEARCH_TYPE } from \"../../models/search\";\nimport LoadingSpinner from \"../../common/components/LoadingSpinner\";\nimport useGetCategory from \"../../hooks/useGetCategory\";\nimport CategoryCard from \"./components/CategoryCard\";\nimport SearchResultSection from \"./components/SearchResultSection\";\nimport { useNavigate, useParams } from \"react-router\";\n\nconst Searchpage = () => {\n  const [keyword, setKeyword] = useState<string>(\"\");\n  const navigate = useNavigate();\n  const { keyword: urlKeyword } = useParams<{ keyword?: string }>();\n\n  const accessToken = localStorage.getItem(\"access_token\");\n  const isLoggedIn = !!accessToken;\n  // console.log(isLoggedIn);\n\n  const {\n    data: searchData,\n    isLoading,\n    isFetchingNextPage,\n  } = useSearchItemsByKeyword({\n    q: keyword,\n    type: [SEARCH_TYPE.Track],\n  });\n\n  const isSearching = isLoading || isFetchingNextPage;\n  const hasTyped = keyword.trim() !== \"\";\n\n  const flatTrackList =\n    searchData?.pages.flatMap((page) => page.tracks?.items ?? []) ?? [];\n\n  const artistIds = [\n    ...new Set(\n      flatTrackList\n        .flatMap((track) => track.artists?.map((a) => a.id) ?? [])\n        .filter((id): id is string => !!id)\n    ),\n  ];\n  const albumIds = [\n    ...new Set(\n      flatTrackList\n        .map((track) => track.album?.id)\n        .filter((id): id is string => !!id)\n    ),\n  ];\n\n  const { data: categoryData, isLoading: isLoadingCategories } =\n    useGetCategory();\n\n  // console.log(\"서치데이터\", flatTrackList);\n\n  useEffect(() => {\n    if (urlKeyword && keyword !== decodeURIComponent(urlKeyword)) {\n      setKeyword(decodeURIComponent(urlKeyword));\n    }\n  }, [urlKeyword]);\n\n  const handleSearchKeyword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newKeyword = e.target.value;\n    setKeyword(newKeyword);\n\n    if (newKeyword.trim() && newKeyword !== urlKeyword) {\n      navigate(`/search/${encodeURIComponent(newKeyword.trim())}`);\n    } else if (!newKeyword.trim()) {\n      navigate(\"/search\");\n    }\n  };\n\n  return (\n    <Box\n      p={3}\n      sx={{\n        width: \"100%\",\n        maxWidth: \"1440px\",\n        margin: \"0 auto\",\n        overflowX: \"hidden\",\n      }}\n    >\n      <TextField\n        value={keyword}\n        onChange={handleSearchKeyword}\n        placeholder=\"What do you want to play?\"\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <SearchIcon sx={{ color: \"white\" }} />\n            </InputAdornment>\n          ),\n        }}\n        sx={{\n          width: {\n            xs: \"100%\",\n            sm: \"400px\",\n            md: \"500px\",\n          },\n          \"& .MuiOutlinedInput-root\": {\n            backgroundColor: \"#424242\",\n            borderRadius: \"24px\",\n            color: \"#fff\",\n          },\n          marginBottom: \"2rem\",\n        }}\n      />\n\n      {/* 로그인 안 됨 */}\n      {!hasTyped && !isLoggedIn && (\n        <Box textAlign=\"center\" mt={4}>\n          <Typography variant=\"h6\" color=\"textSecondary\" gutterBottom>\n            카테고리를 보려면 Spotify 로그인이 필요합니다.\n          </Typography>\n        </Box>\n      )}\n\n      {!hasTyped && isLoggedIn && (\n        <>\n          <Typography variant=\"h5\" fontWeight={600} mb={2}>\n            Browse All\n          </Typography>\n          {isLoadingCategories ? (\n            <LoadingSpinner />\n          ) : (\n            <Box\n              sx={{\n                maxHeight: \"72vh\",\n                overflowY: \"auto\",\n                pr: 1,\n                scrollbarWidth: \"none\",\n                \"&::-webkit-scrollbar\": {\n                  display: \"none\",\n                },\n              }}\n            >\n              <Grid container spacing={2}>\n                {categoryData?.categories.items.map((category) => (\n                  <Grid size={{ xs: 12, sm: 6, md: 4 }} key={category.id}>\n                    <CategoryCard\n                      name={category.name}\n                      image={category.icons?.[0]?.url}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </Box>\n          )}\n        </>\n      )}\n\n      {/* 🔍 검색 중 */}\n      {hasTyped && isSearching && <LoadingSpinner />}\n\n      {/* 🔍 검색 결과 없음 */}\n      {hasTyped && !isSearching && flatTrackList.length === 0 && (\n        <Typography variant=\"h6\" my={4}>\n          No results for: <strong>{keyword}</strong>\n        </Typography>\n      )}\n\n      {/* 🔍 검색 결과 있음 */}\n      {hasTyped && flatTrackList.length >= 4 && (\n        <SearchResultSection\n          trackList={flatTrackList.filter((t) => !!t.id)}\n          artistIds={artistIds}\n          albumIds={albumIds}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default Searchpage;\n","import { useQuery } from \"@tanstack/react-query\";\nimport { getCategories } from \"../apis/categoryApi\";\nimport { CategoryListResponse } from \"../models/category\";\n\nconst useGetCategory = () => {\n  return useQuery<CategoryListResponse>({\n    queryKey: [\"category\"],\n    queryFn: getCategories,\n  });\n};\n\nexport default useGetCategory;\n","import { SimpleAlbum } from \"./album\"\nimport { ApiResponse } from \"./apiResponse\"\nimport { Artist } from \"./artist\"\nimport { SimplifiedPlaylist } from \"./playlist\"\nimport { Show, SimplifiedAudioBook, SimplifiedEpisode, Track } from \"./track\"\n\n// enum - 서로 연관된 값들을 하나의 그룹으로 묶어 사용하기 좋음\nexport const enum SEARCH_TYPE {\n    Track = \"track\",\n    Album = \"album\",\n    Playlist = \"playlist\",\n    Show = \"show\",\n    Episode = \"episode\",\n    AudioBook = \"audiobook\",\n    Artist = \"artist\",\n}\n\nexport interface searchRequestParams {\n    q: string\n    // \"album\", \"artist\", \"playlist\", \"track\", \"show\", \"episode\", \"audiobook\" - enum 으로 만들자 \n    type: SEARCH_TYPE[]\n    market?:string\n    limit?:number\n    offset?:number\n    include_external?:string\n\n}\n\nexport interface SearchResponse{\n    artists?:ApiResponse<Artist>\n    albums?:ApiResponse<SimpleAlbum>\n    tracks?:ApiResponse<Track>\n    playlists?:ApiResponse<SimplifiedPlaylist>\n    shows?:ApiResponse<Show>\n    episodes?:ApiResponse<SimplifiedEpisode>\n    audiobooks?:ApiResponse<SimplifiedAudioBook>\n}","import {\n  AddTracksToPlaylistRequest,\n  AddTracksToPlaylistResponse,\n  CreatePlaylistRequest,\n  getCurrentUserPlaylistRequest,\n  getCurrentUserPlaylistResponse,\n  GetPlaylistItemsRequest,\n  GetPlaylistItemsResponse,\n  GetPlaylistRequest,\n  Playlist,\n} from \"../models/playlist\";\nimport api from \"../utils/api\";\nimport { getClientCredentialToken } from \"./authApi\";\n\nexport const getCurrentUserPlaylist = async ({\n  limit,\n  offset,\n}: getCurrentUserPlaylistRequest): Promise<getCurrentUserPlaylistResponse> => {\n  try {\n    const response = await api.get(\"/me/playlists\", {\n      params: { limit, offset },\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to fetch current user playlist\");\n  }\n};\n\nexport const getPlaylist = async (\n  params: GetPlaylistRequest\n): Promise<Playlist> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to fetch playlist detail\");\n  }\n};\n\nexport const getPlaylistItems = async (\n  params: GetPlaylistItemsRequest\n): Promise<GetPlaylistItemsResponse> => {\n  const token = await getClientCredentialToken();\n  // console.log(\"토큰있냐\", token)\n  const { playlist_id, ...queryParams } = params;\n\n  try {\n    const response = await api.get(`playlists/${params.playlist_id}/tracks`, {\n      params: queryParams,\n      headers: {\n        Authorization: `Bearer ${token.access_token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"getPlaylistItems API Error:\", error);\n    throw new Error(\"fail to fetch playlist items\");\n  }\n};\n\nexport const createPlaylist = async (\n  user_id: string,\n  params: CreatePlaylistRequest\n): Promise<Playlist> => {\n  try {\n    const { name, playlistPublic, collaborative, description } = params;\n    const response = await api.post(`/users/${user_id}/playlists`, {\n      name,\n      public: playlistPublic,\n      collaborative,\n      description,\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to create playlist\");\n  }\n};\n\nexport const addItemsPlaylist = async (\n  playlist_id: string,\n  params: AddTracksToPlaylistRequest\n): Promise<AddTracksToPlaylistResponse> => {\n  try {\n    const response = await api.post(`/playlists/${playlist_id}/tracks`, params);\n    return response.data;\n  } catch (error) {\n    throw new Error(\"fail to add playlist\");\n  }\n};\n"],"names":["useClientCredentialToken","data","useQuery","queryKey","queryFn","getClientCredentialToken","clientCredentialToken","access_token","getNewReleases","async","axios","get","SPOTIFY_API_URL","headers","Authorization","error","Error","getAlbumsByIds","ids","token","api","params","join","console","response","message","useInfiniteQuery","_ref","pageParam","searchParams","URLSearchParams","append","q","type","market","limit","toString","offset","include_external","searchItemsByKeyword","initialPageParam","getNextPageParam","lastpage","nextPageUrl","tracks","next","artists","albums","audiobooks","shows","playlists","episodes","nextOffset","URL","parseInt","undefined","PlayButtonContainer","styled","theme","backgroundColor","palette","primary","main","border","borderRadius","width","height","display","alignItems","justifyContent","cursor","boxShadow","outline","PlayButton","_jsx","children","viewBox","fill","xmlns","d","_ref2","getCurrentUserPlaylist","lastPage","getSpotifyAuthUrl","codeVerifier","crypto","getRandomValues","Uint8Array","reduce","acc","x","possible","codeChallenge","input","TextEncoder","encode","plain","window","subtle","digest","sha256","btoa","String","fromCharCode","replace","clientId","CLIENT_ID","redirectUri","REDIRECT_URI","scope","SCOPES","authUrl","localStorage","setItem","response_type","client_id","code_challenge_method","code_challenge","redirect_uri","search","Object","entries","location","href","getCategories","StyledCard","Card","shouldForwardProp","prop","bgcolor","aspectRatio","padding","flexDirection","color","position","overflow","CategoryImage","objectFit","opacity","transform","transformOrigin","ImageWrapper","Box","bottom","right","name","image","randomColor","getRandomColor","colors","Math","floor","random","length","_jsxs","Typography","variant","fontWeight","src","alt","open","anchorEl","onClose","onSelect","useGetCurrentUserPlaylist","pages","flatMap","page","items","Popover","anchorOrigin","vertical","horizontal","sx","p","List","dense","map","playlist","ListItemButton","onClick","id","ListItemText","track","gutterBottom","component","album","images","url","marginBottom","a","AddButtonWrapper","transition","HoverRow","TableRow","formatDuration","ms","totalSeconds","padStart","onAddClick","Table","TableBody","slice","index","TableCell","pl","borderBottom","py","noWrap","align","px","whiteSpace","className","e","AddIcon","fontSize","duration_ms","ArtistCardContainer","Overlay","top","left","pointerEvents","zIndex","ArtistPlayButtonWrapper","Grid","container","spacing","filter","artist","size","xs","sm","md","mt","mb","maxWidth","textOverflow","trackList","artistIds","albumIds","artistsData","getArtistsByIds","enabled","retry","useArtistsByIds","albumsResponse","staleTime","useAlbumsByIds","albumsData","popoverAnchor","setPopoverAnchor","useState","selectedTrack","setSelectedTrack","artistMap","Map","albumMap","TopResult","TrackTable","handlePopoverOpen","getItem","alert","currentTarget","ArtistSection","values","AlbumSection","PlaylistSelectPopover","Boolean","handlePopoverClose","uri","playlistId","trackUri","addItemsPlaylist","uris","handleAddTrack","Searchpage","keyword","setKeyword","navigate","useNavigate","urlKeyword","useParams","isLoggedIn","searchData","isLoading","isFetchingNextPage","useSearchItemsByKeyword","SEARCH_TYPE","Track","isSearching","hasTyped","trim","flatTrackList","Set","categoryData","isLoadingCategories","useEffect","decodeURIComponent","margin","overflowX","TextField","value","onChange","newKeyword","target","encodeURIComponent","placeholder","InputProps","startAdornment","InputAdornment","SearchIcon","textAlign","_Fragment","LoadingSpinner","maxHeight","overflowY","pr","scrollbarWidth","categories","category","CategoryCard","icons","my","SearchResultSection","t","getPlaylist","playlist_id","getPlaylistItems","queryParams","createPlaylist","user_id","playlistPublic","collaborative","description","post","public"],"sourceRoot":""}